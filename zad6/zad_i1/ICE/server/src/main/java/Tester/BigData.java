//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.5
//
// <auto-generated>
//
// Generated from file `Tester.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Tester;

public class BigData implements java.lang.Cloneable,
                                java.io.Serializable
{
    public MediumData mediumData;

    public int n5;

    public int n6;

    public int n7;

    public int n8;

    public int n9;

    public int n10;

    public String s3;

    public String s4;

    public String s5;

    public String s6;

    public String s7;

    public String s8;

    public double d3;

    public double d4;

    public double d5;

    public boolean b3;

    public boolean b4;

    public boolean b5;

    public long[] iSeq2;

    public String[] sSeq2;

    public double[] dSeq1;

    public double[] dSeq2;

    public BigData()
    {
        this.mediumData = new MediumData();
        this.s3 = "";
        this.s4 = "";
        this.s5 = "";
        this.s6 = "";
        this.s7 = "";
        this.s8 = "";
    }

    public BigData(MediumData mediumData, int n5, int n6, int n7, int n8, int n9, int n10, String s3, String s4, String s5, String s6, String s7, String s8, double d3, double d4, double d5, boolean b3, boolean b4, boolean b5, long[] iSeq2, String[] sSeq2, double[] dSeq1, double[] dSeq2)
    {
        this.mediumData = mediumData;
        this.n5 = n5;
        this.n6 = n6;
        this.n7 = n7;
        this.n8 = n8;
        this.n9 = n9;
        this.n10 = n10;
        this.s3 = s3;
        this.s4 = s4;
        this.s5 = s5;
        this.s6 = s6;
        this.s7 = s7;
        this.s8 = s8;
        this.d3 = d3;
        this.d4 = d4;
        this.d5 = d5;
        this.b3 = b3;
        this.b4 = b4;
        this.b5 = b5;
        this.iSeq2 = iSeq2;
        this.sSeq2 = sSeq2;
        this.dSeq1 = dSeq1;
        this.dSeq2 = dSeq2;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        BigData r = null;
        if(rhs instanceof BigData)
        {
            r = (BigData)rhs;
        }

        if(r != null)
        {
            if(this.mediumData != r.mediumData)
            {
                if(this.mediumData == null || r.mediumData == null || !this.mediumData.equals(r.mediumData))
                {
                    return false;
                }
            }
            if(this.n5 != r.n5)
            {
                return false;
            }
            if(this.n6 != r.n6)
            {
                return false;
            }
            if(this.n7 != r.n7)
            {
                return false;
            }
            if(this.n8 != r.n8)
            {
                return false;
            }
            if(this.n9 != r.n9)
            {
                return false;
            }
            if(this.n10 != r.n10)
            {
                return false;
            }
            if(this.s3 != r.s3)
            {
                if(this.s3 == null || r.s3 == null || !this.s3.equals(r.s3))
                {
                    return false;
                }
            }
            if(this.s4 != r.s4)
            {
                if(this.s4 == null || r.s4 == null || !this.s4.equals(r.s4))
                {
                    return false;
                }
            }
            if(this.s5 != r.s5)
            {
                if(this.s5 == null || r.s5 == null || !this.s5.equals(r.s5))
                {
                    return false;
                }
            }
            if(this.s6 != r.s6)
            {
                if(this.s6 == null || r.s6 == null || !this.s6.equals(r.s6))
                {
                    return false;
                }
            }
            if(this.s7 != r.s7)
            {
                if(this.s7 == null || r.s7 == null || !this.s7.equals(r.s7))
                {
                    return false;
                }
            }
            if(this.s8 != r.s8)
            {
                if(this.s8 == null || r.s8 == null || !this.s8.equals(r.s8))
                {
                    return false;
                }
            }
            if(this.d3 != r.d3)
            {
                return false;
            }
            if(this.d4 != r.d4)
            {
                return false;
            }
            if(this.d5 != r.d5)
            {
                return false;
            }
            if(this.b3 != r.b3)
            {
                return false;
            }
            if(this.b4 != r.b4)
            {
                return false;
            }
            if(this.b5 != r.b5)
            {
                return false;
            }
            if(!java.util.Arrays.equals(this.iSeq2, r.iSeq2))
            {
                return false;
            }
            if(!java.util.Arrays.equals(this.sSeq2, r.sSeq2))
            {
                return false;
            }
            if(!java.util.Arrays.equals(this.dSeq1, r.dSeq1))
            {
                return false;
            }
            if(!java.util.Arrays.equals(this.dSeq2, r.dSeq2))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::Tester::BigData");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, mediumData);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, n5);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, n6);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, n7);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, n8);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, n9);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, n10);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, s3);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, s4);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, s5);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, s6);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, s7);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, s8);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, d3);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, d4);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, d5);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, b3);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, b4);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, b5);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, iSeq2);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, sSeq2);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, dSeq1);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, dSeq2);
        return h_;
    }

    public BigData clone()
    {
        BigData c = null;
        try
        {
            c = (BigData)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        MediumData.ice_write(ostr, this.mediumData);
        ostr.writeInt(this.n5);
        ostr.writeInt(this.n6);
        ostr.writeInt(this.n7);
        ostr.writeInt(this.n8);
        ostr.writeInt(this.n9);
        ostr.writeInt(this.n10);
        ostr.writeString(this.s3);
        ostr.writeString(this.s4);
        ostr.writeString(this.s5);
        ostr.writeString(this.s6);
        ostr.writeString(this.s7);
        ostr.writeString(this.s8);
        ostr.writeDouble(this.d3);
        ostr.writeDouble(this.d4);
        ostr.writeDouble(this.d5);
        ostr.writeBool(this.b3);
        ostr.writeBool(this.b4);
        ostr.writeBool(this.b5);
        ostr.writeLongSeq(this.iSeq2);
        ostr.writeStringSeq(this.sSeq2);
        ostr.writeDoubleSeq(this.dSeq1);
        ostr.writeDoubleSeq(this.dSeq2);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.mediumData = MediumData.ice_read(istr);
        this.n5 = istr.readInt();
        this.n6 = istr.readInt();
        this.n7 = istr.readInt();
        this.n8 = istr.readInt();
        this.n9 = istr.readInt();
        this.n10 = istr.readInt();
        this.s3 = istr.readString();
        this.s4 = istr.readString();
        this.s5 = istr.readString();
        this.s6 = istr.readString();
        this.s7 = istr.readString();
        this.s8 = istr.readString();
        this.d3 = istr.readDouble();
        this.d4 = istr.readDouble();
        this.d5 = istr.readDouble();
        this.b3 = istr.readBool();
        this.b4 = istr.readBool();
        this.b5 = istr.readBool();
        this.iSeq2 = istr.readLongSeq();
        this.sSeq2 = istr.readStringSeq();
        this.dSeq1 = istr.readDoubleSeq();
        this.dSeq2 = istr.readDoubleSeq();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, BigData v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public BigData ice_read(com.zeroc.Ice.InputStream istr)
    {
        BigData v = new BigData();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<BigData> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, BigData v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<BigData> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(BigData.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final BigData _nullMarshalValue = new BigData();

    /** @hidden */
    public static final long serialVersionUID = -1636748484L;
}
