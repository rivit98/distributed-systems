#
# Autogenerated by Thrift Compiler (0.14.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class SmallData(object):
    """
    Attributes:
     - n1
     - n2
     - s1
     - b1
     - iSeq1

    """


    def __init__(self, n1=None, n2=None, s1=None, b1=None, iSeq1=None,):
        self.n1 = n1
        self.n2 = n2
        self.s1 = s1
        self.b1 = b1
        self.iSeq1 = iSeq1

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.n1 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.n2 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.s1 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.b1 = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.iSeq1 = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readI32()
                        self.iSeq1.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SmallData')
        if self.n1 is not None:
            oprot.writeFieldBegin('n1', TType.I32, 1)
            oprot.writeI32(self.n1)
            oprot.writeFieldEnd()
        if self.n2 is not None:
            oprot.writeFieldBegin('n2', TType.I32, 2)
            oprot.writeI32(self.n2)
            oprot.writeFieldEnd()
        if self.s1 is not None:
            oprot.writeFieldBegin('s1', TType.STRING, 3)
            oprot.writeString(self.s1.encode('utf-8') if sys.version_info[0] == 2 else self.s1)
            oprot.writeFieldEnd()
        if self.b1 is not None:
            oprot.writeFieldBegin('b1', TType.BOOL, 4)
            oprot.writeBool(self.b1)
            oprot.writeFieldEnd()
        if self.iSeq1 is not None:
            oprot.writeFieldBegin('iSeq1', TType.LIST, 5)
            oprot.writeListBegin(TType.I32, len(self.iSeq1))
            for iter6 in self.iSeq1:
                oprot.writeI32(iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MediumData(object):
    """
    Attributes:
     - smallData
     - n3
     - n4
     - d1
     - d2
     - s2
     - b2
     - sSeq1

    """


    def __init__(self, smallData=None, n3=None, n4=None, d1=None, d2=None, s2=None, b2=None, sSeq1=None,):
        self.smallData = smallData
        self.n3 = n3
        self.n4 = n4
        self.d1 = d1
        self.d2 = d2
        self.s2 = s2
        self.b2 = b2
        self.sSeq1 = sSeq1

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.smallData = SmallData()
                    self.smallData.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.n3 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.n4 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.d1 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.d2 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.s2 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.b2 = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.sSeq1 = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.sSeq1.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MediumData')
        if self.smallData is not None:
            oprot.writeFieldBegin('smallData', TType.STRUCT, 1)
            self.smallData.write(oprot)
            oprot.writeFieldEnd()
        if self.n3 is not None:
            oprot.writeFieldBegin('n3', TType.I32, 2)
            oprot.writeI32(self.n3)
            oprot.writeFieldEnd()
        if self.n4 is not None:
            oprot.writeFieldBegin('n4', TType.I32, 3)
            oprot.writeI32(self.n4)
            oprot.writeFieldEnd()
        if self.d1 is not None:
            oprot.writeFieldBegin('d1', TType.DOUBLE, 4)
            oprot.writeDouble(self.d1)
            oprot.writeFieldEnd()
        if self.d2 is not None:
            oprot.writeFieldBegin('d2', TType.DOUBLE, 5)
            oprot.writeDouble(self.d2)
            oprot.writeFieldEnd()
        if self.s2 is not None:
            oprot.writeFieldBegin('s2', TType.STRING, 6)
            oprot.writeString(self.s2.encode('utf-8') if sys.version_info[0] == 2 else self.s2)
            oprot.writeFieldEnd()
        if self.b2 is not None:
            oprot.writeFieldBegin('b2', TType.BOOL, 7)
            oprot.writeBool(self.b2)
            oprot.writeFieldEnd()
        if self.sSeq1 is not None:
            oprot.writeFieldBegin('sSeq1', TType.LIST, 8)
            oprot.writeListBegin(TType.STRING, len(self.sSeq1))
            for iter13 in self.sSeq1:
                oprot.writeString(iter13.encode('utf-8') if sys.version_info[0] == 2 else iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BigData(object):
    """
    Attributes:
     - mediumData
     - n5
     - n6
     - n7
     - n8
     - n9
     - n10
     - s3
     - s4
     - s5
     - s6
     - s7
     - s8
     - d3
     - d4
     - d5
     - b3
     - b4
     - b5
     - iSeq2
     - sSeq2
     - dSeq1
     - dSeq2

    """


    def __init__(self, mediumData=None, n5=None, n6=None, n7=None, n8=None, n9=None, n10=None, s3=None, s4=None, s5=None, s6=None, s7=None, s8=None, d3=None, d4=None, d5=None, b3=None, b4=None, b5=None, iSeq2=None, sSeq2=None, dSeq1=None, dSeq2=None,):
        self.mediumData = mediumData
        self.n5 = n5
        self.n6 = n6
        self.n7 = n7
        self.n8 = n8
        self.n9 = n9
        self.n10 = n10
        self.s3 = s3
        self.s4 = s4
        self.s5 = s5
        self.s6 = s6
        self.s7 = s7
        self.s8 = s8
        self.d3 = d3
        self.d4 = d4
        self.d5 = d5
        self.b3 = b3
        self.b4 = b4
        self.b5 = b5
        self.iSeq2 = iSeq2
        self.sSeq2 = sSeq2
        self.dSeq1 = dSeq1
        self.dSeq2 = dSeq2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.mediumData = MediumData()
                    self.mediumData.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.n5 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.n6 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.n7 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.n8 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.n9 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.n10 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.s3 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.s4 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.s5 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.s6 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.s7 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.s8 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.DOUBLE:
                    self.d3 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.DOUBLE:
                    self.d4 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.DOUBLE:
                    self.d5 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.BOOL:
                    self.b3 = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.BOOL:
                    self.b4 = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.BOOL:
                    self.b5 = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.LIST:
                    self.iSeq2 = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = iprot.readI32()
                        self.iSeq2.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.LIST:
                    self.sSeq2 = []
                    (_etype23, _size20) = iprot.readListBegin()
                    for _i24 in range(_size20):
                        _elem25 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.sSeq2.append(_elem25)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.LIST:
                    self.dSeq1 = []
                    (_etype29, _size26) = iprot.readListBegin()
                    for _i30 in range(_size26):
                        _elem31 = iprot.readDouble()
                        self.dSeq1.append(_elem31)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.LIST:
                    self.dSeq2 = []
                    (_etype35, _size32) = iprot.readListBegin()
                    for _i36 in range(_size32):
                        _elem37 = iprot.readDouble()
                        self.dSeq2.append(_elem37)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BigData')
        if self.mediumData is not None:
            oprot.writeFieldBegin('mediumData', TType.STRUCT, 1)
            self.mediumData.write(oprot)
            oprot.writeFieldEnd()
        if self.n5 is not None:
            oprot.writeFieldBegin('n5', TType.I32, 2)
            oprot.writeI32(self.n5)
            oprot.writeFieldEnd()
        if self.n6 is not None:
            oprot.writeFieldBegin('n6', TType.I32, 3)
            oprot.writeI32(self.n6)
            oprot.writeFieldEnd()
        if self.n7 is not None:
            oprot.writeFieldBegin('n7', TType.I32, 4)
            oprot.writeI32(self.n7)
            oprot.writeFieldEnd()
        if self.n8 is not None:
            oprot.writeFieldBegin('n8', TType.I32, 5)
            oprot.writeI32(self.n8)
            oprot.writeFieldEnd()
        if self.n9 is not None:
            oprot.writeFieldBegin('n9', TType.I32, 6)
            oprot.writeI32(self.n9)
            oprot.writeFieldEnd()
        if self.n10 is not None:
            oprot.writeFieldBegin('n10', TType.I32, 7)
            oprot.writeI32(self.n10)
            oprot.writeFieldEnd()
        if self.s3 is not None:
            oprot.writeFieldBegin('s3', TType.STRING, 8)
            oprot.writeString(self.s3.encode('utf-8') if sys.version_info[0] == 2 else self.s3)
            oprot.writeFieldEnd()
        if self.s4 is not None:
            oprot.writeFieldBegin('s4', TType.STRING, 9)
            oprot.writeString(self.s4.encode('utf-8') if sys.version_info[0] == 2 else self.s4)
            oprot.writeFieldEnd()
        if self.s5 is not None:
            oprot.writeFieldBegin('s5', TType.STRING, 10)
            oprot.writeString(self.s5.encode('utf-8') if sys.version_info[0] == 2 else self.s5)
            oprot.writeFieldEnd()
        if self.s6 is not None:
            oprot.writeFieldBegin('s6', TType.STRING, 11)
            oprot.writeString(self.s6.encode('utf-8') if sys.version_info[0] == 2 else self.s6)
            oprot.writeFieldEnd()
        if self.s7 is not None:
            oprot.writeFieldBegin('s7', TType.STRING, 12)
            oprot.writeString(self.s7.encode('utf-8') if sys.version_info[0] == 2 else self.s7)
            oprot.writeFieldEnd()
        if self.s8 is not None:
            oprot.writeFieldBegin('s8', TType.STRING, 13)
            oprot.writeString(self.s8.encode('utf-8') if sys.version_info[0] == 2 else self.s8)
            oprot.writeFieldEnd()
        if self.d3 is not None:
            oprot.writeFieldBegin('d3', TType.DOUBLE, 14)
            oprot.writeDouble(self.d3)
            oprot.writeFieldEnd()
        if self.d4 is not None:
            oprot.writeFieldBegin('d4', TType.DOUBLE, 15)
            oprot.writeDouble(self.d4)
            oprot.writeFieldEnd()
        if self.d5 is not None:
            oprot.writeFieldBegin('d5', TType.DOUBLE, 16)
            oprot.writeDouble(self.d5)
            oprot.writeFieldEnd()
        if self.b3 is not None:
            oprot.writeFieldBegin('b3', TType.BOOL, 17)
            oprot.writeBool(self.b3)
            oprot.writeFieldEnd()
        if self.b4 is not None:
            oprot.writeFieldBegin('b4', TType.BOOL, 18)
            oprot.writeBool(self.b4)
            oprot.writeFieldEnd()
        if self.b5 is not None:
            oprot.writeFieldBegin('b5', TType.BOOL, 19)
            oprot.writeBool(self.b5)
            oprot.writeFieldEnd()
        if self.iSeq2 is not None:
            oprot.writeFieldBegin('iSeq2', TType.LIST, 20)
            oprot.writeListBegin(TType.I32, len(self.iSeq2))
            for iter38 in self.iSeq2:
                oprot.writeI32(iter38)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.sSeq2 is not None:
            oprot.writeFieldBegin('sSeq2', TType.LIST, 21)
            oprot.writeListBegin(TType.STRING, len(self.sSeq2))
            for iter39 in self.sSeq2:
                oprot.writeString(iter39.encode('utf-8') if sys.version_info[0] == 2 else iter39)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.dSeq1 is not None:
            oprot.writeFieldBegin('dSeq1', TType.LIST, 22)
            oprot.writeListBegin(TType.DOUBLE, len(self.dSeq1))
            for iter40 in self.dSeq1:
                oprot.writeDouble(iter40)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.dSeq2 is not None:
            oprot.writeFieldBegin('dSeq2', TType.LIST, 23)
            oprot.writeListBegin(TType.DOUBLE, len(self.dSeq2))
            for iter41 in self.dSeq2:
                oprot.writeDouble(iter41)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(SmallData)
SmallData.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'n1', None, None, ),  # 1
    (2, TType.I32, 'n2', None, None, ),  # 2
    (3, TType.STRING, 's1', 'UTF8', None, ),  # 3
    (4, TType.BOOL, 'b1', None, None, ),  # 4
    (5, TType.LIST, 'iSeq1', (TType.I32, None, False), None, ),  # 5
)
all_structs.append(MediumData)
MediumData.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'smallData', [SmallData, None], None, ),  # 1
    (2, TType.I32, 'n3', None, None, ),  # 2
    (3, TType.I32, 'n4', None, None, ),  # 3
    (4, TType.DOUBLE, 'd1', None, None, ),  # 4
    (5, TType.DOUBLE, 'd2', None, None, ),  # 5
    (6, TType.STRING, 's2', 'UTF8', None, ),  # 6
    (7, TType.BOOL, 'b2', None, None, ),  # 7
    (8, TType.LIST, 'sSeq1', (TType.STRING, 'UTF8', False), None, ),  # 8
)
all_structs.append(BigData)
BigData.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'mediumData', [MediumData, None], None, ),  # 1
    (2, TType.I32, 'n5', None, None, ),  # 2
    (3, TType.I32, 'n6', None, None, ),  # 3
    (4, TType.I32, 'n7', None, None, ),  # 4
    (5, TType.I32, 'n8', None, None, ),  # 5
    (6, TType.I32, 'n9', None, None, ),  # 6
    (7, TType.I32, 'n10', None, None, ),  # 7
    (8, TType.STRING, 's3', 'UTF8', None, ),  # 8
    (9, TType.STRING, 's4', 'UTF8', None, ),  # 9
    (10, TType.STRING, 's5', 'UTF8', None, ),  # 10
    (11, TType.STRING, 's6', 'UTF8', None, ),  # 11
    (12, TType.STRING, 's7', 'UTF8', None, ),  # 12
    (13, TType.STRING, 's8', 'UTF8', None, ),  # 13
    (14, TType.DOUBLE, 'd3', None, None, ),  # 14
    (15, TType.DOUBLE, 'd4', None, None, ),  # 15
    (16, TType.DOUBLE, 'd5', None, None, ),  # 16
    (17, TType.BOOL, 'b3', None, None, ),  # 17
    (18, TType.BOOL, 'b4', None, None, ),  # 18
    (19, TType.BOOL, 'b5', None, None, ),  # 19
    (20, TType.LIST, 'iSeq2', (TType.I32, None, False), None, ),  # 20
    (21, TType.LIST, 'sSeq2', (TType.STRING, 'UTF8', False), None, ),  # 21
    (22, TType.LIST, 'dSeq1', (TType.DOUBLE, None, False), None, ),  # 22
    (23, TType.LIST, 'dSeq2', (TType.DOUBLE, None, False), None, ),  # 23
)
fix_spec(all_structs)
del all_structs
