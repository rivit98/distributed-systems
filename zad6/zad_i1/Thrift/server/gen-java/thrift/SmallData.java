/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-06-02")
public class SmallData implements org.apache.thrift.TBase<SmallData, SmallData._Fields>, java.io.Serializable, Cloneable, Comparable<SmallData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SmallData");

  private static final org.apache.thrift.protocol.TField N1_FIELD_DESC = new org.apache.thrift.protocol.TField("n1", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField N2_FIELD_DESC = new org.apache.thrift.protocol.TField("n2", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField S1_FIELD_DESC = new org.apache.thrift.protocol.TField("s1", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField B1_FIELD_DESC = new org.apache.thrift.protocol.TField("b1", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField I_SEQ1_FIELD_DESC = new org.apache.thrift.protocol.TField("iSeq1", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SmallDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SmallDataTupleSchemeFactory();

  private int n1; // required
  private int n2; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String s1; // required
  private boolean b1; // required
  private @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> iSeq1; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    N1((short)1, "n1"),
    N2((short)2, "n2"),
    S1((short)3, "s1"),
    B1((short)4, "b1"),
    I_SEQ1((short)5, "iSeq1");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // N1
          return N1;
        case 2: // N2
          return N2;
        case 3: // S1
          return S1;
        case 4: // B1
          return B1;
        case 5: // I_SEQ1
          return I_SEQ1;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __N1_ISSET_ID = 0;
  private static final int __N2_ISSET_ID = 1;
  private static final int __B1_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.N1, new org.apache.thrift.meta_data.FieldMetaData("n1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.N2, new org.apache.thrift.meta_data.FieldMetaData("n2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.S1, new org.apache.thrift.meta_data.FieldMetaData("s1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.B1, new org.apache.thrift.meta_data.FieldMetaData("b1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.I_SEQ1, new org.apache.thrift.meta_data.FieldMetaData("iSeq1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SmallData.class, metaDataMap);
  }

  public SmallData() {
  }

  public SmallData(
    int n1,
    int n2,
    java.lang.String s1,
    boolean b1,
    java.util.List<java.lang.Integer> iSeq1)
  {
    this();
    this.n1 = n1;
    setN1IsSet(true);
    this.n2 = n2;
    setN2IsSet(true);
    this.s1 = s1;
    this.b1 = b1;
    setB1IsSet(true);
    this.iSeq1 = iSeq1;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SmallData(SmallData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.n1 = other.n1;
    this.n2 = other.n2;
    if (other.isSetS1()) {
      this.s1 = other.s1;
    }
    this.b1 = other.b1;
    if (other.isSetISeq1()) {
      java.util.List<java.lang.Integer> __this__iSeq1 = new java.util.ArrayList<java.lang.Integer>(other.iSeq1);
      this.iSeq1 = __this__iSeq1;
    }
  }

  public SmallData deepCopy() {
    return new SmallData(this);
  }

  @Override
  public void clear() {
    setN1IsSet(false);
    this.n1 = 0;
    setN2IsSet(false);
    this.n2 = 0;
    this.s1 = null;
    setB1IsSet(false);
    this.b1 = false;
    this.iSeq1 = null;
  }

  public int getN1() {
    return this.n1;
  }

  public SmallData setN1(int n1) {
    this.n1 = n1;
    setN1IsSet(true);
    return this;
  }

  public void unsetN1() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __N1_ISSET_ID);
  }

  /** Returns true if field n1 is set (has been assigned a value) and false otherwise */
  public boolean isSetN1() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __N1_ISSET_ID);
  }

  public void setN1IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __N1_ISSET_ID, value);
  }

  public int getN2() {
    return this.n2;
  }

  public SmallData setN2(int n2) {
    this.n2 = n2;
    setN2IsSet(true);
    return this;
  }

  public void unsetN2() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __N2_ISSET_ID);
  }

  /** Returns true if field n2 is set (has been assigned a value) and false otherwise */
  public boolean isSetN2() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __N2_ISSET_ID);
  }

  public void setN2IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __N2_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getS1() {
    return this.s1;
  }

  public SmallData setS1(@org.apache.thrift.annotation.Nullable java.lang.String s1) {
    this.s1 = s1;
    return this;
  }

  public void unsetS1() {
    this.s1 = null;
  }

  /** Returns true if field s1 is set (has been assigned a value) and false otherwise */
  public boolean isSetS1() {
    return this.s1 != null;
  }

  public void setS1IsSet(boolean value) {
    if (!value) {
      this.s1 = null;
    }
  }

  public boolean isB1() {
    return this.b1;
  }

  public SmallData setB1(boolean b1) {
    this.b1 = b1;
    setB1IsSet(true);
    return this;
  }

  public void unsetB1() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __B1_ISSET_ID);
  }

  /** Returns true if field b1 is set (has been assigned a value) and false otherwise */
  public boolean isSetB1() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __B1_ISSET_ID);
  }

  public void setB1IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __B1_ISSET_ID, value);
  }

  public int getISeq1Size() {
    return (this.iSeq1 == null) ? 0 : this.iSeq1.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getISeq1Iterator() {
    return (this.iSeq1 == null) ? null : this.iSeq1.iterator();
  }

  public void addToISeq1(int elem) {
    if (this.iSeq1 == null) {
      this.iSeq1 = new java.util.ArrayList<java.lang.Integer>();
    }
    this.iSeq1.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getISeq1() {
    return this.iSeq1;
  }

  public SmallData setISeq1(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> iSeq1) {
    this.iSeq1 = iSeq1;
    return this;
  }

  public void unsetISeq1() {
    this.iSeq1 = null;
  }

  /** Returns true if field iSeq1 is set (has been assigned a value) and false otherwise */
  public boolean isSetISeq1() {
    return this.iSeq1 != null;
  }

  public void setISeq1IsSet(boolean value) {
    if (!value) {
      this.iSeq1 = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case N1:
      if (value == null) {
        unsetN1();
      } else {
        setN1((java.lang.Integer)value);
      }
      break;

    case N2:
      if (value == null) {
        unsetN2();
      } else {
        setN2((java.lang.Integer)value);
      }
      break;

    case S1:
      if (value == null) {
        unsetS1();
      } else {
        setS1((java.lang.String)value);
      }
      break;

    case B1:
      if (value == null) {
        unsetB1();
      } else {
        setB1((java.lang.Boolean)value);
      }
      break;

    case I_SEQ1:
      if (value == null) {
        unsetISeq1();
      } else {
        setISeq1((java.util.List<java.lang.Integer>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case N1:
      return getN1();

    case N2:
      return getN2();

    case S1:
      return getS1();

    case B1:
      return isB1();

    case I_SEQ1:
      return getISeq1();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case N1:
      return isSetN1();
    case N2:
      return isSetN2();
    case S1:
      return isSetS1();
    case B1:
      return isSetB1();
    case I_SEQ1:
      return isSetISeq1();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof SmallData)
      return this.equals((SmallData)that);
    return false;
  }

  public boolean equals(SmallData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_n1 = true;
    boolean that_present_n1 = true;
    if (this_present_n1 || that_present_n1) {
      if (!(this_present_n1 && that_present_n1))
        return false;
      if (this.n1 != that.n1)
        return false;
    }

    boolean this_present_n2 = true;
    boolean that_present_n2 = true;
    if (this_present_n2 || that_present_n2) {
      if (!(this_present_n2 && that_present_n2))
        return false;
      if (this.n2 != that.n2)
        return false;
    }

    boolean this_present_s1 = true && this.isSetS1();
    boolean that_present_s1 = true && that.isSetS1();
    if (this_present_s1 || that_present_s1) {
      if (!(this_present_s1 && that_present_s1))
        return false;
      if (!this.s1.equals(that.s1))
        return false;
    }

    boolean this_present_b1 = true;
    boolean that_present_b1 = true;
    if (this_present_b1 || that_present_b1) {
      if (!(this_present_b1 && that_present_b1))
        return false;
      if (this.b1 != that.b1)
        return false;
    }

    boolean this_present_iSeq1 = true && this.isSetISeq1();
    boolean that_present_iSeq1 = true && that.isSetISeq1();
    if (this_present_iSeq1 || that_present_iSeq1) {
      if (!(this_present_iSeq1 && that_present_iSeq1))
        return false;
      if (!this.iSeq1.equals(that.iSeq1))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + n1;

    hashCode = hashCode * 8191 + n2;

    hashCode = hashCode * 8191 + ((isSetS1()) ? 131071 : 524287);
    if (isSetS1())
      hashCode = hashCode * 8191 + s1.hashCode();

    hashCode = hashCode * 8191 + ((b1) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetISeq1()) ? 131071 : 524287);
    if (isSetISeq1())
      hashCode = hashCode * 8191 + iSeq1.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SmallData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetN1(), other.isSetN1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetN1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.n1, other.n1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetN2(), other.isSetN2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetN2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.n2, other.n2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetS1(), other.isSetS1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s1, other.s1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetB1(), other.isSetB1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b1, other.b1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetISeq1(), other.isSetISeq1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetISeq1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iSeq1, other.iSeq1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SmallData(");
    boolean first = true;

    sb.append("n1:");
    sb.append(this.n1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("n2:");
    sb.append(this.n2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("s1:");
    if (this.s1 == null) {
      sb.append("null");
    } else {
      sb.append(this.s1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("b1:");
    sb.append(this.b1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("iSeq1:");
    if (this.iSeq1 == null) {
      sb.append("null");
    } else {
      sb.append(this.iSeq1);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SmallDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SmallDataStandardScheme getScheme() {
      return new SmallDataStandardScheme();
    }
  }

  private static class SmallDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<SmallData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SmallData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // N1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.n1 = iprot.readI32();
              struct.setN1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // N2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.n2 = iprot.readI32();
              struct.setN2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // S1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.s1 = iprot.readString();
              struct.setS1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // B1
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.b1 = iprot.readBool();
              struct.setB1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // I_SEQ1
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.iSeq1 = new java.util.ArrayList<java.lang.Integer>(_list0.size);
                int _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI32();
                  struct.iSeq1.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setISeq1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SmallData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(N1_FIELD_DESC);
      oprot.writeI32(struct.n1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(N2_FIELD_DESC);
      oprot.writeI32(struct.n2);
      oprot.writeFieldEnd();
      if (struct.s1 != null) {
        oprot.writeFieldBegin(S1_FIELD_DESC);
        oprot.writeString(struct.s1);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(B1_FIELD_DESC);
      oprot.writeBool(struct.b1);
      oprot.writeFieldEnd();
      if (struct.iSeq1 != null) {
        oprot.writeFieldBegin(I_SEQ1_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.iSeq1.size()));
          for (int _iter3 : struct.iSeq1)
          {
            oprot.writeI32(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SmallDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SmallDataTupleScheme getScheme() {
      return new SmallDataTupleScheme();
    }
  }

  private static class SmallDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<SmallData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SmallData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetN1()) {
        optionals.set(0);
      }
      if (struct.isSetN2()) {
        optionals.set(1);
      }
      if (struct.isSetS1()) {
        optionals.set(2);
      }
      if (struct.isSetB1()) {
        optionals.set(3);
      }
      if (struct.isSetISeq1()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetN1()) {
        oprot.writeI32(struct.n1);
      }
      if (struct.isSetN2()) {
        oprot.writeI32(struct.n2);
      }
      if (struct.isSetS1()) {
        oprot.writeString(struct.s1);
      }
      if (struct.isSetB1()) {
        oprot.writeBool(struct.b1);
      }
      if (struct.isSetISeq1()) {
        {
          oprot.writeI32(struct.iSeq1.size());
          for (int _iter4 : struct.iSeq1)
          {
            oprot.writeI32(_iter4);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SmallData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.n1 = iprot.readI32();
        struct.setN1IsSet(true);
      }
      if (incoming.get(1)) {
        struct.n2 = iprot.readI32();
        struct.setN2IsSet(true);
      }
      if (incoming.get(2)) {
        struct.s1 = iprot.readString();
        struct.setS1IsSet(true);
      }
      if (incoming.get(3)) {
        struct.b1 = iprot.readBool();
        struct.setB1IsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list5 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.iSeq1 = new java.util.ArrayList<java.lang.Integer>(_list5.size);
          int _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readI32();
            struct.iSeq1.add(_elem6);
          }
        }
        struct.setISeq1IsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

