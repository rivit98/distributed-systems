/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-06-02")
public class BigData implements org.apache.thrift.TBase<BigData, BigData._Fields>, java.io.Serializable, Cloneable, Comparable<BigData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BigData");

  private static final org.apache.thrift.protocol.TField MEDIUM_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("mediumData", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField N5_FIELD_DESC = new org.apache.thrift.protocol.TField("n5", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField N6_FIELD_DESC = new org.apache.thrift.protocol.TField("n6", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField N7_FIELD_DESC = new org.apache.thrift.protocol.TField("n7", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField N8_FIELD_DESC = new org.apache.thrift.protocol.TField("n8", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField N9_FIELD_DESC = new org.apache.thrift.protocol.TField("n9", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField N10_FIELD_DESC = new org.apache.thrift.protocol.TField("n10", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField S3_FIELD_DESC = new org.apache.thrift.protocol.TField("s3", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField S4_FIELD_DESC = new org.apache.thrift.protocol.TField("s4", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField S5_FIELD_DESC = new org.apache.thrift.protocol.TField("s5", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField S6_FIELD_DESC = new org.apache.thrift.protocol.TField("s6", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField S7_FIELD_DESC = new org.apache.thrift.protocol.TField("s7", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField S8_FIELD_DESC = new org.apache.thrift.protocol.TField("s8", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField D3_FIELD_DESC = new org.apache.thrift.protocol.TField("d3", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField D4_FIELD_DESC = new org.apache.thrift.protocol.TField("d4", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField D5_FIELD_DESC = new org.apache.thrift.protocol.TField("d5", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField B3_FIELD_DESC = new org.apache.thrift.protocol.TField("b3", org.apache.thrift.protocol.TType.BOOL, (short)17);
  private static final org.apache.thrift.protocol.TField B4_FIELD_DESC = new org.apache.thrift.protocol.TField("b4", org.apache.thrift.protocol.TType.BOOL, (short)18);
  private static final org.apache.thrift.protocol.TField B5_FIELD_DESC = new org.apache.thrift.protocol.TField("b5", org.apache.thrift.protocol.TType.BOOL, (short)19);
  private static final org.apache.thrift.protocol.TField I_SEQ2_FIELD_DESC = new org.apache.thrift.protocol.TField("iSeq2", org.apache.thrift.protocol.TType.LIST, (short)20);
  private static final org.apache.thrift.protocol.TField S_SEQ2_FIELD_DESC = new org.apache.thrift.protocol.TField("sSeq2", org.apache.thrift.protocol.TType.LIST, (short)21);
  private static final org.apache.thrift.protocol.TField D_SEQ1_FIELD_DESC = new org.apache.thrift.protocol.TField("dSeq1", org.apache.thrift.protocol.TType.LIST, (short)22);
  private static final org.apache.thrift.protocol.TField D_SEQ2_FIELD_DESC = new org.apache.thrift.protocol.TField("dSeq2", org.apache.thrift.protocol.TType.LIST, (short)23);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BigDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BigDataTupleSchemeFactory();

  private @org.apache.thrift.annotation.Nullable MediumData mediumData; // required
  private int n5; // required
  private int n6; // required
  private int n7; // required
  private int n8; // required
  private int n9; // required
  private int n10; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String s3; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String s4; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String s5; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String s6; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String s7; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String s8; // required
  private double d3; // required
  private double d4; // required
  private double d5; // required
  private boolean b3; // required
  private boolean b4; // required
  private boolean b5; // required
  private @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> iSeq2; // required
  private @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> sSeq2; // required
  private @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> dSeq1; // required
  private @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> dSeq2; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MEDIUM_DATA((short)1, "mediumData"),
    N5((short)2, "n5"),
    N6((short)3, "n6"),
    N7((short)4, "n7"),
    N8((short)5, "n8"),
    N9((short)6, "n9"),
    N10((short)7, "n10"),
    S3((short)8, "s3"),
    S4((short)9, "s4"),
    S5((short)10, "s5"),
    S6((short)11, "s6"),
    S7((short)12, "s7"),
    S8((short)13, "s8"),
    D3((short)14, "d3"),
    D4((short)15, "d4"),
    D5((short)16, "d5"),
    B3((short)17, "b3"),
    B4((short)18, "b4"),
    B5((short)19, "b5"),
    I_SEQ2((short)20, "iSeq2"),
    S_SEQ2((short)21, "sSeq2"),
    D_SEQ1((short)22, "dSeq1"),
    D_SEQ2((short)23, "dSeq2");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MEDIUM_DATA
          return MEDIUM_DATA;
        case 2: // N5
          return N5;
        case 3: // N6
          return N6;
        case 4: // N7
          return N7;
        case 5: // N8
          return N8;
        case 6: // N9
          return N9;
        case 7: // N10
          return N10;
        case 8: // S3
          return S3;
        case 9: // S4
          return S4;
        case 10: // S5
          return S5;
        case 11: // S6
          return S6;
        case 12: // S7
          return S7;
        case 13: // S8
          return S8;
        case 14: // D3
          return D3;
        case 15: // D4
          return D4;
        case 16: // D5
          return D5;
        case 17: // B3
          return B3;
        case 18: // B4
          return B4;
        case 19: // B5
          return B5;
        case 20: // I_SEQ2
          return I_SEQ2;
        case 21: // S_SEQ2
          return S_SEQ2;
        case 22: // D_SEQ1
          return D_SEQ1;
        case 23: // D_SEQ2
          return D_SEQ2;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __N5_ISSET_ID = 0;
  private static final int __N6_ISSET_ID = 1;
  private static final int __N7_ISSET_ID = 2;
  private static final int __N8_ISSET_ID = 3;
  private static final int __N9_ISSET_ID = 4;
  private static final int __N10_ISSET_ID = 5;
  private static final int __D3_ISSET_ID = 6;
  private static final int __D4_ISSET_ID = 7;
  private static final int __D5_ISSET_ID = 8;
  private static final int __B3_ISSET_ID = 9;
  private static final int __B4_ISSET_ID = 10;
  private static final int __B5_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MEDIUM_DATA, new org.apache.thrift.meta_data.FieldMetaData("mediumData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MediumData.class)));
    tmpMap.put(_Fields.N5, new org.apache.thrift.meta_data.FieldMetaData("n5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.N6, new org.apache.thrift.meta_data.FieldMetaData("n6", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.N7, new org.apache.thrift.meta_data.FieldMetaData("n7", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.N8, new org.apache.thrift.meta_data.FieldMetaData("n8", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.N9, new org.apache.thrift.meta_data.FieldMetaData("n9", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.N10, new org.apache.thrift.meta_data.FieldMetaData("n10", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.S3, new org.apache.thrift.meta_data.FieldMetaData("s3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.S4, new org.apache.thrift.meta_data.FieldMetaData("s4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.S5, new org.apache.thrift.meta_data.FieldMetaData("s5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.S6, new org.apache.thrift.meta_data.FieldMetaData("s6", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.S7, new org.apache.thrift.meta_data.FieldMetaData("s7", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.S8, new org.apache.thrift.meta_data.FieldMetaData("s8", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.D3, new org.apache.thrift.meta_data.FieldMetaData("d3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.D4, new org.apache.thrift.meta_data.FieldMetaData("d4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.D5, new org.apache.thrift.meta_data.FieldMetaData("d5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.B3, new org.apache.thrift.meta_data.FieldMetaData("b3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.B4, new org.apache.thrift.meta_data.FieldMetaData("b4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.B5, new org.apache.thrift.meta_data.FieldMetaData("b5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.I_SEQ2, new org.apache.thrift.meta_data.FieldMetaData("iSeq2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.S_SEQ2, new org.apache.thrift.meta_data.FieldMetaData("sSeq2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.D_SEQ1, new org.apache.thrift.meta_data.FieldMetaData("dSeq1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.D_SEQ2, new org.apache.thrift.meta_data.FieldMetaData("dSeq2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BigData.class, metaDataMap);
  }

  public BigData() {
  }

  public BigData(
    MediumData mediumData,
    int n5,
    int n6,
    int n7,
    int n8,
    int n9,
    int n10,
    java.lang.String s3,
    java.lang.String s4,
    java.lang.String s5,
    java.lang.String s6,
    java.lang.String s7,
    java.lang.String s8,
    double d3,
    double d4,
    double d5,
    boolean b3,
    boolean b4,
    boolean b5,
    java.util.List<java.lang.Integer> iSeq2,
    java.util.List<java.lang.String> sSeq2,
    java.util.List<java.lang.Double> dSeq1,
    java.util.List<java.lang.Double> dSeq2)
  {
    this();
    this.mediumData = mediumData;
    this.n5 = n5;
    setN5IsSet(true);
    this.n6 = n6;
    setN6IsSet(true);
    this.n7 = n7;
    setN7IsSet(true);
    this.n8 = n8;
    setN8IsSet(true);
    this.n9 = n9;
    setN9IsSet(true);
    this.n10 = n10;
    setN10IsSet(true);
    this.s3 = s3;
    this.s4 = s4;
    this.s5 = s5;
    this.s6 = s6;
    this.s7 = s7;
    this.s8 = s8;
    this.d3 = d3;
    setD3IsSet(true);
    this.d4 = d4;
    setD4IsSet(true);
    this.d5 = d5;
    setD5IsSet(true);
    this.b3 = b3;
    setB3IsSet(true);
    this.b4 = b4;
    setB4IsSet(true);
    this.b5 = b5;
    setB5IsSet(true);
    this.iSeq2 = iSeq2;
    this.sSeq2 = sSeq2;
    this.dSeq1 = dSeq1;
    this.dSeq2 = dSeq2;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BigData(BigData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMediumData()) {
      this.mediumData = new MediumData(other.mediumData);
    }
    this.n5 = other.n5;
    this.n6 = other.n6;
    this.n7 = other.n7;
    this.n8 = other.n8;
    this.n9 = other.n9;
    this.n10 = other.n10;
    if (other.isSetS3()) {
      this.s3 = other.s3;
    }
    if (other.isSetS4()) {
      this.s4 = other.s4;
    }
    if (other.isSetS5()) {
      this.s5 = other.s5;
    }
    if (other.isSetS6()) {
      this.s6 = other.s6;
    }
    if (other.isSetS7()) {
      this.s7 = other.s7;
    }
    if (other.isSetS8()) {
      this.s8 = other.s8;
    }
    this.d3 = other.d3;
    this.d4 = other.d4;
    this.d5 = other.d5;
    this.b3 = other.b3;
    this.b4 = other.b4;
    this.b5 = other.b5;
    if (other.isSetISeq2()) {
      java.util.List<java.lang.Integer> __this__iSeq2 = new java.util.ArrayList<java.lang.Integer>(other.iSeq2);
      this.iSeq2 = __this__iSeq2;
    }
    if (other.isSetSSeq2()) {
      java.util.List<java.lang.String> __this__sSeq2 = new java.util.ArrayList<java.lang.String>(other.sSeq2);
      this.sSeq2 = __this__sSeq2;
    }
    if (other.isSetDSeq1()) {
      java.util.List<java.lang.Double> __this__dSeq1 = new java.util.ArrayList<java.lang.Double>(other.dSeq1);
      this.dSeq1 = __this__dSeq1;
    }
    if (other.isSetDSeq2()) {
      java.util.List<java.lang.Double> __this__dSeq2 = new java.util.ArrayList<java.lang.Double>(other.dSeq2);
      this.dSeq2 = __this__dSeq2;
    }
  }

  public BigData deepCopy() {
    return new BigData(this);
  }

  @Override
  public void clear() {
    this.mediumData = null;
    setN5IsSet(false);
    this.n5 = 0;
    setN6IsSet(false);
    this.n6 = 0;
    setN7IsSet(false);
    this.n7 = 0;
    setN8IsSet(false);
    this.n8 = 0;
    setN9IsSet(false);
    this.n9 = 0;
    setN10IsSet(false);
    this.n10 = 0;
    this.s3 = null;
    this.s4 = null;
    this.s5 = null;
    this.s6 = null;
    this.s7 = null;
    this.s8 = null;
    setD3IsSet(false);
    this.d3 = 0.0;
    setD4IsSet(false);
    this.d4 = 0.0;
    setD5IsSet(false);
    this.d5 = 0.0;
    setB3IsSet(false);
    this.b3 = false;
    setB4IsSet(false);
    this.b4 = false;
    setB5IsSet(false);
    this.b5 = false;
    this.iSeq2 = null;
    this.sSeq2 = null;
    this.dSeq1 = null;
    this.dSeq2 = null;
  }

  @org.apache.thrift.annotation.Nullable
  public MediumData getMediumData() {
    return this.mediumData;
  }

  public BigData setMediumData(@org.apache.thrift.annotation.Nullable MediumData mediumData) {
    this.mediumData = mediumData;
    return this;
  }

  public void unsetMediumData() {
    this.mediumData = null;
  }

  /** Returns true if field mediumData is set (has been assigned a value) and false otherwise */
  public boolean isSetMediumData() {
    return this.mediumData != null;
  }

  public void setMediumDataIsSet(boolean value) {
    if (!value) {
      this.mediumData = null;
    }
  }

  public int getN5() {
    return this.n5;
  }

  public BigData setN5(int n5) {
    this.n5 = n5;
    setN5IsSet(true);
    return this;
  }

  public void unsetN5() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __N5_ISSET_ID);
  }

  /** Returns true if field n5 is set (has been assigned a value) and false otherwise */
  public boolean isSetN5() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __N5_ISSET_ID);
  }

  public void setN5IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __N5_ISSET_ID, value);
  }

  public int getN6() {
    return this.n6;
  }

  public BigData setN6(int n6) {
    this.n6 = n6;
    setN6IsSet(true);
    return this;
  }

  public void unsetN6() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __N6_ISSET_ID);
  }

  /** Returns true if field n6 is set (has been assigned a value) and false otherwise */
  public boolean isSetN6() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __N6_ISSET_ID);
  }

  public void setN6IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __N6_ISSET_ID, value);
  }

  public int getN7() {
    return this.n7;
  }

  public BigData setN7(int n7) {
    this.n7 = n7;
    setN7IsSet(true);
    return this;
  }

  public void unsetN7() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __N7_ISSET_ID);
  }

  /** Returns true if field n7 is set (has been assigned a value) and false otherwise */
  public boolean isSetN7() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __N7_ISSET_ID);
  }

  public void setN7IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __N7_ISSET_ID, value);
  }

  public int getN8() {
    return this.n8;
  }

  public BigData setN8(int n8) {
    this.n8 = n8;
    setN8IsSet(true);
    return this;
  }

  public void unsetN8() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __N8_ISSET_ID);
  }

  /** Returns true if field n8 is set (has been assigned a value) and false otherwise */
  public boolean isSetN8() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __N8_ISSET_ID);
  }

  public void setN8IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __N8_ISSET_ID, value);
  }

  public int getN9() {
    return this.n9;
  }

  public BigData setN9(int n9) {
    this.n9 = n9;
    setN9IsSet(true);
    return this;
  }

  public void unsetN9() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __N9_ISSET_ID);
  }

  /** Returns true if field n9 is set (has been assigned a value) and false otherwise */
  public boolean isSetN9() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __N9_ISSET_ID);
  }

  public void setN9IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __N9_ISSET_ID, value);
  }

  public int getN10() {
    return this.n10;
  }

  public BigData setN10(int n10) {
    this.n10 = n10;
    setN10IsSet(true);
    return this;
  }

  public void unsetN10() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __N10_ISSET_ID);
  }

  /** Returns true if field n10 is set (has been assigned a value) and false otherwise */
  public boolean isSetN10() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __N10_ISSET_ID);
  }

  public void setN10IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __N10_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getS3() {
    return this.s3;
  }

  public BigData setS3(@org.apache.thrift.annotation.Nullable java.lang.String s3) {
    this.s3 = s3;
    return this;
  }

  public void unsetS3() {
    this.s3 = null;
  }

  /** Returns true if field s3 is set (has been assigned a value) and false otherwise */
  public boolean isSetS3() {
    return this.s3 != null;
  }

  public void setS3IsSet(boolean value) {
    if (!value) {
      this.s3 = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getS4() {
    return this.s4;
  }

  public BigData setS4(@org.apache.thrift.annotation.Nullable java.lang.String s4) {
    this.s4 = s4;
    return this;
  }

  public void unsetS4() {
    this.s4 = null;
  }

  /** Returns true if field s4 is set (has been assigned a value) and false otherwise */
  public boolean isSetS4() {
    return this.s4 != null;
  }

  public void setS4IsSet(boolean value) {
    if (!value) {
      this.s4 = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getS5() {
    return this.s5;
  }

  public BigData setS5(@org.apache.thrift.annotation.Nullable java.lang.String s5) {
    this.s5 = s5;
    return this;
  }

  public void unsetS5() {
    this.s5 = null;
  }

  /** Returns true if field s5 is set (has been assigned a value) and false otherwise */
  public boolean isSetS5() {
    return this.s5 != null;
  }

  public void setS5IsSet(boolean value) {
    if (!value) {
      this.s5 = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getS6() {
    return this.s6;
  }

  public BigData setS6(@org.apache.thrift.annotation.Nullable java.lang.String s6) {
    this.s6 = s6;
    return this;
  }

  public void unsetS6() {
    this.s6 = null;
  }

  /** Returns true if field s6 is set (has been assigned a value) and false otherwise */
  public boolean isSetS6() {
    return this.s6 != null;
  }

  public void setS6IsSet(boolean value) {
    if (!value) {
      this.s6 = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getS7() {
    return this.s7;
  }

  public BigData setS7(@org.apache.thrift.annotation.Nullable java.lang.String s7) {
    this.s7 = s7;
    return this;
  }

  public void unsetS7() {
    this.s7 = null;
  }

  /** Returns true if field s7 is set (has been assigned a value) and false otherwise */
  public boolean isSetS7() {
    return this.s7 != null;
  }

  public void setS7IsSet(boolean value) {
    if (!value) {
      this.s7 = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getS8() {
    return this.s8;
  }

  public BigData setS8(@org.apache.thrift.annotation.Nullable java.lang.String s8) {
    this.s8 = s8;
    return this;
  }

  public void unsetS8() {
    this.s8 = null;
  }

  /** Returns true if field s8 is set (has been assigned a value) and false otherwise */
  public boolean isSetS8() {
    return this.s8 != null;
  }

  public void setS8IsSet(boolean value) {
    if (!value) {
      this.s8 = null;
    }
  }

  public double getD3() {
    return this.d3;
  }

  public BigData setD3(double d3) {
    this.d3 = d3;
    setD3IsSet(true);
    return this;
  }

  public void unsetD3() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __D3_ISSET_ID);
  }

  /** Returns true if field d3 is set (has been assigned a value) and false otherwise */
  public boolean isSetD3() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __D3_ISSET_ID);
  }

  public void setD3IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __D3_ISSET_ID, value);
  }

  public double getD4() {
    return this.d4;
  }

  public BigData setD4(double d4) {
    this.d4 = d4;
    setD4IsSet(true);
    return this;
  }

  public void unsetD4() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __D4_ISSET_ID);
  }

  /** Returns true if field d4 is set (has been assigned a value) and false otherwise */
  public boolean isSetD4() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __D4_ISSET_ID);
  }

  public void setD4IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __D4_ISSET_ID, value);
  }

  public double getD5() {
    return this.d5;
  }

  public BigData setD5(double d5) {
    this.d5 = d5;
    setD5IsSet(true);
    return this;
  }

  public void unsetD5() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __D5_ISSET_ID);
  }

  /** Returns true if field d5 is set (has been assigned a value) and false otherwise */
  public boolean isSetD5() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __D5_ISSET_ID);
  }

  public void setD5IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __D5_ISSET_ID, value);
  }

  public boolean isB3() {
    return this.b3;
  }

  public BigData setB3(boolean b3) {
    this.b3 = b3;
    setB3IsSet(true);
    return this;
  }

  public void unsetB3() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __B3_ISSET_ID);
  }

  /** Returns true if field b3 is set (has been assigned a value) and false otherwise */
  public boolean isSetB3() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __B3_ISSET_ID);
  }

  public void setB3IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __B3_ISSET_ID, value);
  }

  public boolean isB4() {
    return this.b4;
  }

  public BigData setB4(boolean b4) {
    this.b4 = b4;
    setB4IsSet(true);
    return this;
  }

  public void unsetB4() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __B4_ISSET_ID);
  }

  /** Returns true if field b4 is set (has been assigned a value) and false otherwise */
  public boolean isSetB4() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __B4_ISSET_ID);
  }

  public void setB4IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __B4_ISSET_ID, value);
  }

  public boolean isB5() {
    return this.b5;
  }

  public BigData setB5(boolean b5) {
    this.b5 = b5;
    setB5IsSet(true);
    return this;
  }

  public void unsetB5() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __B5_ISSET_ID);
  }

  /** Returns true if field b5 is set (has been assigned a value) and false otherwise */
  public boolean isSetB5() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __B5_ISSET_ID);
  }

  public void setB5IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __B5_ISSET_ID, value);
  }

  public int getISeq2Size() {
    return (this.iSeq2 == null) ? 0 : this.iSeq2.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getISeq2Iterator() {
    return (this.iSeq2 == null) ? null : this.iSeq2.iterator();
  }

  public void addToISeq2(int elem) {
    if (this.iSeq2 == null) {
      this.iSeq2 = new java.util.ArrayList<java.lang.Integer>();
    }
    this.iSeq2.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getISeq2() {
    return this.iSeq2;
  }

  public BigData setISeq2(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> iSeq2) {
    this.iSeq2 = iSeq2;
    return this;
  }

  public void unsetISeq2() {
    this.iSeq2 = null;
  }

  /** Returns true if field iSeq2 is set (has been assigned a value) and false otherwise */
  public boolean isSetISeq2() {
    return this.iSeq2 != null;
  }

  public void setISeq2IsSet(boolean value) {
    if (!value) {
      this.iSeq2 = null;
    }
  }

  public int getSSeq2Size() {
    return (this.sSeq2 == null) ? 0 : this.sSeq2.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getSSeq2Iterator() {
    return (this.sSeq2 == null) ? null : this.sSeq2.iterator();
  }

  public void addToSSeq2(java.lang.String elem) {
    if (this.sSeq2 == null) {
      this.sSeq2 = new java.util.ArrayList<java.lang.String>();
    }
    this.sSeq2.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getSSeq2() {
    return this.sSeq2;
  }

  public BigData setSSeq2(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> sSeq2) {
    this.sSeq2 = sSeq2;
    return this;
  }

  public void unsetSSeq2() {
    this.sSeq2 = null;
  }

  /** Returns true if field sSeq2 is set (has been assigned a value) and false otherwise */
  public boolean isSetSSeq2() {
    return this.sSeq2 != null;
  }

  public void setSSeq2IsSet(boolean value) {
    if (!value) {
      this.sSeq2 = null;
    }
  }

  public int getDSeq1Size() {
    return (this.dSeq1 == null) ? 0 : this.dSeq1.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getDSeq1Iterator() {
    return (this.dSeq1 == null) ? null : this.dSeq1.iterator();
  }

  public void addToDSeq1(double elem) {
    if (this.dSeq1 == null) {
      this.dSeq1 = new java.util.ArrayList<java.lang.Double>();
    }
    this.dSeq1.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getDSeq1() {
    return this.dSeq1;
  }

  public BigData setDSeq1(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> dSeq1) {
    this.dSeq1 = dSeq1;
    return this;
  }

  public void unsetDSeq1() {
    this.dSeq1 = null;
  }

  /** Returns true if field dSeq1 is set (has been assigned a value) and false otherwise */
  public boolean isSetDSeq1() {
    return this.dSeq1 != null;
  }

  public void setDSeq1IsSet(boolean value) {
    if (!value) {
      this.dSeq1 = null;
    }
  }

  public int getDSeq2Size() {
    return (this.dSeq2 == null) ? 0 : this.dSeq2.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getDSeq2Iterator() {
    return (this.dSeq2 == null) ? null : this.dSeq2.iterator();
  }

  public void addToDSeq2(double elem) {
    if (this.dSeq2 == null) {
      this.dSeq2 = new java.util.ArrayList<java.lang.Double>();
    }
    this.dSeq2.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getDSeq2() {
    return this.dSeq2;
  }

  public BigData setDSeq2(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> dSeq2) {
    this.dSeq2 = dSeq2;
    return this;
  }

  public void unsetDSeq2() {
    this.dSeq2 = null;
  }

  /** Returns true if field dSeq2 is set (has been assigned a value) and false otherwise */
  public boolean isSetDSeq2() {
    return this.dSeq2 != null;
  }

  public void setDSeq2IsSet(boolean value) {
    if (!value) {
      this.dSeq2 = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case MEDIUM_DATA:
      if (value == null) {
        unsetMediumData();
      } else {
        setMediumData((MediumData)value);
      }
      break;

    case N5:
      if (value == null) {
        unsetN5();
      } else {
        setN5((java.lang.Integer)value);
      }
      break;

    case N6:
      if (value == null) {
        unsetN6();
      } else {
        setN6((java.lang.Integer)value);
      }
      break;

    case N7:
      if (value == null) {
        unsetN7();
      } else {
        setN7((java.lang.Integer)value);
      }
      break;

    case N8:
      if (value == null) {
        unsetN8();
      } else {
        setN8((java.lang.Integer)value);
      }
      break;

    case N9:
      if (value == null) {
        unsetN9();
      } else {
        setN9((java.lang.Integer)value);
      }
      break;

    case N10:
      if (value == null) {
        unsetN10();
      } else {
        setN10((java.lang.Integer)value);
      }
      break;

    case S3:
      if (value == null) {
        unsetS3();
      } else {
        setS3((java.lang.String)value);
      }
      break;

    case S4:
      if (value == null) {
        unsetS4();
      } else {
        setS4((java.lang.String)value);
      }
      break;

    case S5:
      if (value == null) {
        unsetS5();
      } else {
        setS5((java.lang.String)value);
      }
      break;

    case S6:
      if (value == null) {
        unsetS6();
      } else {
        setS6((java.lang.String)value);
      }
      break;

    case S7:
      if (value == null) {
        unsetS7();
      } else {
        setS7((java.lang.String)value);
      }
      break;

    case S8:
      if (value == null) {
        unsetS8();
      } else {
        setS8((java.lang.String)value);
      }
      break;

    case D3:
      if (value == null) {
        unsetD3();
      } else {
        setD3((java.lang.Double)value);
      }
      break;

    case D4:
      if (value == null) {
        unsetD4();
      } else {
        setD4((java.lang.Double)value);
      }
      break;

    case D5:
      if (value == null) {
        unsetD5();
      } else {
        setD5((java.lang.Double)value);
      }
      break;

    case B3:
      if (value == null) {
        unsetB3();
      } else {
        setB3((java.lang.Boolean)value);
      }
      break;

    case B4:
      if (value == null) {
        unsetB4();
      } else {
        setB4((java.lang.Boolean)value);
      }
      break;

    case B5:
      if (value == null) {
        unsetB5();
      } else {
        setB5((java.lang.Boolean)value);
      }
      break;

    case I_SEQ2:
      if (value == null) {
        unsetISeq2();
      } else {
        setISeq2((java.util.List<java.lang.Integer>)value);
      }
      break;

    case S_SEQ2:
      if (value == null) {
        unsetSSeq2();
      } else {
        setSSeq2((java.util.List<java.lang.String>)value);
      }
      break;

    case D_SEQ1:
      if (value == null) {
        unsetDSeq1();
      } else {
        setDSeq1((java.util.List<java.lang.Double>)value);
      }
      break;

    case D_SEQ2:
      if (value == null) {
        unsetDSeq2();
      } else {
        setDSeq2((java.util.List<java.lang.Double>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case MEDIUM_DATA:
      return getMediumData();

    case N5:
      return getN5();

    case N6:
      return getN6();

    case N7:
      return getN7();

    case N8:
      return getN8();

    case N9:
      return getN9();

    case N10:
      return getN10();

    case S3:
      return getS3();

    case S4:
      return getS4();

    case S5:
      return getS5();

    case S6:
      return getS6();

    case S7:
      return getS7();

    case S8:
      return getS8();

    case D3:
      return getD3();

    case D4:
      return getD4();

    case D5:
      return getD5();

    case B3:
      return isB3();

    case B4:
      return isB4();

    case B5:
      return isB5();

    case I_SEQ2:
      return getISeq2();

    case S_SEQ2:
      return getSSeq2();

    case D_SEQ1:
      return getDSeq1();

    case D_SEQ2:
      return getDSeq2();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case MEDIUM_DATA:
      return isSetMediumData();
    case N5:
      return isSetN5();
    case N6:
      return isSetN6();
    case N7:
      return isSetN7();
    case N8:
      return isSetN8();
    case N9:
      return isSetN9();
    case N10:
      return isSetN10();
    case S3:
      return isSetS3();
    case S4:
      return isSetS4();
    case S5:
      return isSetS5();
    case S6:
      return isSetS6();
    case S7:
      return isSetS7();
    case S8:
      return isSetS8();
    case D3:
      return isSetD3();
    case D4:
      return isSetD4();
    case D5:
      return isSetD5();
    case B3:
      return isSetB3();
    case B4:
      return isSetB4();
    case B5:
      return isSetB5();
    case I_SEQ2:
      return isSetISeq2();
    case S_SEQ2:
      return isSetSSeq2();
    case D_SEQ1:
      return isSetDSeq1();
    case D_SEQ2:
      return isSetDSeq2();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof BigData)
      return this.equals((BigData)that);
    return false;
  }

  public boolean equals(BigData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_mediumData = true && this.isSetMediumData();
    boolean that_present_mediumData = true && that.isSetMediumData();
    if (this_present_mediumData || that_present_mediumData) {
      if (!(this_present_mediumData && that_present_mediumData))
        return false;
      if (!this.mediumData.equals(that.mediumData))
        return false;
    }

    boolean this_present_n5 = true;
    boolean that_present_n5 = true;
    if (this_present_n5 || that_present_n5) {
      if (!(this_present_n5 && that_present_n5))
        return false;
      if (this.n5 != that.n5)
        return false;
    }

    boolean this_present_n6 = true;
    boolean that_present_n6 = true;
    if (this_present_n6 || that_present_n6) {
      if (!(this_present_n6 && that_present_n6))
        return false;
      if (this.n6 != that.n6)
        return false;
    }

    boolean this_present_n7 = true;
    boolean that_present_n7 = true;
    if (this_present_n7 || that_present_n7) {
      if (!(this_present_n7 && that_present_n7))
        return false;
      if (this.n7 != that.n7)
        return false;
    }

    boolean this_present_n8 = true;
    boolean that_present_n8 = true;
    if (this_present_n8 || that_present_n8) {
      if (!(this_present_n8 && that_present_n8))
        return false;
      if (this.n8 != that.n8)
        return false;
    }

    boolean this_present_n9 = true;
    boolean that_present_n9 = true;
    if (this_present_n9 || that_present_n9) {
      if (!(this_present_n9 && that_present_n9))
        return false;
      if (this.n9 != that.n9)
        return false;
    }

    boolean this_present_n10 = true;
    boolean that_present_n10 = true;
    if (this_present_n10 || that_present_n10) {
      if (!(this_present_n10 && that_present_n10))
        return false;
      if (this.n10 != that.n10)
        return false;
    }

    boolean this_present_s3 = true && this.isSetS3();
    boolean that_present_s3 = true && that.isSetS3();
    if (this_present_s3 || that_present_s3) {
      if (!(this_present_s3 && that_present_s3))
        return false;
      if (!this.s3.equals(that.s3))
        return false;
    }

    boolean this_present_s4 = true && this.isSetS4();
    boolean that_present_s4 = true && that.isSetS4();
    if (this_present_s4 || that_present_s4) {
      if (!(this_present_s4 && that_present_s4))
        return false;
      if (!this.s4.equals(that.s4))
        return false;
    }

    boolean this_present_s5 = true && this.isSetS5();
    boolean that_present_s5 = true && that.isSetS5();
    if (this_present_s5 || that_present_s5) {
      if (!(this_present_s5 && that_present_s5))
        return false;
      if (!this.s5.equals(that.s5))
        return false;
    }

    boolean this_present_s6 = true && this.isSetS6();
    boolean that_present_s6 = true && that.isSetS6();
    if (this_present_s6 || that_present_s6) {
      if (!(this_present_s6 && that_present_s6))
        return false;
      if (!this.s6.equals(that.s6))
        return false;
    }

    boolean this_present_s7 = true && this.isSetS7();
    boolean that_present_s7 = true && that.isSetS7();
    if (this_present_s7 || that_present_s7) {
      if (!(this_present_s7 && that_present_s7))
        return false;
      if (!this.s7.equals(that.s7))
        return false;
    }

    boolean this_present_s8 = true && this.isSetS8();
    boolean that_present_s8 = true && that.isSetS8();
    if (this_present_s8 || that_present_s8) {
      if (!(this_present_s8 && that_present_s8))
        return false;
      if (!this.s8.equals(that.s8))
        return false;
    }

    boolean this_present_d3 = true;
    boolean that_present_d3 = true;
    if (this_present_d3 || that_present_d3) {
      if (!(this_present_d3 && that_present_d3))
        return false;
      if (this.d3 != that.d3)
        return false;
    }

    boolean this_present_d4 = true;
    boolean that_present_d4 = true;
    if (this_present_d4 || that_present_d4) {
      if (!(this_present_d4 && that_present_d4))
        return false;
      if (this.d4 != that.d4)
        return false;
    }

    boolean this_present_d5 = true;
    boolean that_present_d5 = true;
    if (this_present_d5 || that_present_d5) {
      if (!(this_present_d5 && that_present_d5))
        return false;
      if (this.d5 != that.d5)
        return false;
    }

    boolean this_present_b3 = true;
    boolean that_present_b3 = true;
    if (this_present_b3 || that_present_b3) {
      if (!(this_present_b3 && that_present_b3))
        return false;
      if (this.b3 != that.b3)
        return false;
    }

    boolean this_present_b4 = true;
    boolean that_present_b4 = true;
    if (this_present_b4 || that_present_b4) {
      if (!(this_present_b4 && that_present_b4))
        return false;
      if (this.b4 != that.b4)
        return false;
    }

    boolean this_present_b5 = true;
    boolean that_present_b5 = true;
    if (this_present_b5 || that_present_b5) {
      if (!(this_present_b5 && that_present_b5))
        return false;
      if (this.b5 != that.b5)
        return false;
    }

    boolean this_present_iSeq2 = true && this.isSetISeq2();
    boolean that_present_iSeq2 = true && that.isSetISeq2();
    if (this_present_iSeq2 || that_present_iSeq2) {
      if (!(this_present_iSeq2 && that_present_iSeq2))
        return false;
      if (!this.iSeq2.equals(that.iSeq2))
        return false;
    }

    boolean this_present_sSeq2 = true && this.isSetSSeq2();
    boolean that_present_sSeq2 = true && that.isSetSSeq2();
    if (this_present_sSeq2 || that_present_sSeq2) {
      if (!(this_present_sSeq2 && that_present_sSeq2))
        return false;
      if (!this.sSeq2.equals(that.sSeq2))
        return false;
    }

    boolean this_present_dSeq1 = true && this.isSetDSeq1();
    boolean that_present_dSeq1 = true && that.isSetDSeq1();
    if (this_present_dSeq1 || that_present_dSeq1) {
      if (!(this_present_dSeq1 && that_present_dSeq1))
        return false;
      if (!this.dSeq1.equals(that.dSeq1))
        return false;
    }

    boolean this_present_dSeq2 = true && this.isSetDSeq2();
    boolean that_present_dSeq2 = true && that.isSetDSeq2();
    if (this_present_dSeq2 || that_present_dSeq2) {
      if (!(this_present_dSeq2 && that_present_dSeq2))
        return false;
      if (!this.dSeq2.equals(that.dSeq2))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetMediumData()) ? 131071 : 524287);
    if (isSetMediumData())
      hashCode = hashCode * 8191 + mediumData.hashCode();

    hashCode = hashCode * 8191 + n5;

    hashCode = hashCode * 8191 + n6;

    hashCode = hashCode * 8191 + n7;

    hashCode = hashCode * 8191 + n8;

    hashCode = hashCode * 8191 + n9;

    hashCode = hashCode * 8191 + n10;

    hashCode = hashCode * 8191 + ((isSetS3()) ? 131071 : 524287);
    if (isSetS3())
      hashCode = hashCode * 8191 + s3.hashCode();

    hashCode = hashCode * 8191 + ((isSetS4()) ? 131071 : 524287);
    if (isSetS4())
      hashCode = hashCode * 8191 + s4.hashCode();

    hashCode = hashCode * 8191 + ((isSetS5()) ? 131071 : 524287);
    if (isSetS5())
      hashCode = hashCode * 8191 + s5.hashCode();

    hashCode = hashCode * 8191 + ((isSetS6()) ? 131071 : 524287);
    if (isSetS6())
      hashCode = hashCode * 8191 + s6.hashCode();

    hashCode = hashCode * 8191 + ((isSetS7()) ? 131071 : 524287);
    if (isSetS7())
      hashCode = hashCode * 8191 + s7.hashCode();

    hashCode = hashCode * 8191 + ((isSetS8()) ? 131071 : 524287);
    if (isSetS8())
      hashCode = hashCode * 8191 + s8.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(d3);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(d4);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(d5);

    hashCode = hashCode * 8191 + ((b3) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((b4) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((b5) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetISeq2()) ? 131071 : 524287);
    if (isSetISeq2())
      hashCode = hashCode * 8191 + iSeq2.hashCode();

    hashCode = hashCode * 8191 + ((isSetSSeq2()) ? 131071 : 524287);
    if (isSetSSeq2())
      hashCode = hashCode * 8191 + sSeq2.hashCode();

    hashCode = hashCode * 8191 + ((isSetDSeq1()) ? 131071 : 524287);
    if (isSetDSeq1())
      hashCode = hashCode * 8191 + dSeq1.hashCode();

    hashCode = hashCode * 8191 + ((isSetDSeq2()) ? 131071 : 524287);
    if (isSetDSeq2())
      hashCode = hashCode * 8191 + dSeq2.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(BigData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetMediumData(), other.isSetMediumData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMediumData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediumData, other.mediumData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetN5(), other.isSetN5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetN5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.n5, other.n5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetN6(), other.isSetN6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetN6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.n6, other.n6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetN7(), other.isSetN7());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetN7()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.n7, other.n7);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetN8(), other.isSetN8());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetN8()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.n8, other.n8);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetN9(), other.isSetN9());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetN9()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.n9, other.n9);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetN10(), other.isSetN10());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetN10()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.n10, other.n10);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetS3(), other.isSetS3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s3, other.s3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetS4(), other.isSetS4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s4, other.s4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetS5(), other.isSetS5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s5, other.s5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetS6(), other.isSetS6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s6, other.s6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetS7(), other.isSetS7());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS7()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s7, other.s7);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetS8(), other.isSetS8());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS8()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s8, other.s8);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetD3(), other.isSetD3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d3, other.d3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetD4(), other.isSetD4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d4, other.d4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetD5(), other.isSetD5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d5, other.d5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetB3(), other.isSetB3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b3, other.b3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetB4(), other.isSetB4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b4, other.b4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetB5(), other.isSetB5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b5, other.b5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetISeq2(), other.isSetISeq2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetISeq2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iSeq2, other.iSeq2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSSeq2(), other.isSetSSeq2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSSeq2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sSeq2, other.sSeq2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDSeq1(), other.isSetDSeq1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDSeq1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dSeq1, other.dSeq1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDSeq2(), other.isSetDSeq2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDSeq2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dSeq2, other.dSeq2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("BigData(");
    boolean first = true;

    sb.append("mediumData:");
    if (this.mediumData == null) {
      sb.append("null");
    } else {
      sb.append(this.mediumData);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("n5:");
    sb.append(this.n5);
    first = false;
    if (!first) sb.append(", ");
    sb.append("n6:");
    sb.append(this.n6);
    first = false;
    if (!first) sb.append(", ");
    sb.append("n7:");
    sb.append(this.n7);
    first = false;
    if (!first) sb.append(", ");
    sb.append("n8:");
    sb.append(this.n8);
    first = false;
    if (!first) sb.append(", ");
    sb.append("n9:");
    sb.append(this.n9);
    first = false;
    if (!first) sb.append(", ");
    sb.append("n10:");
    sb.append(this.n10);
    first = false;
    if (!first) sb.append(", ");
    sb.append("s3:");
    if (this.s3 == null) {
      sb.append("null");
    } else {
      sb.append(this.s3);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("s4:");
    if (this.s4 == null) {
      sb.append("null");
    } else {
      sb.append(this.s4);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("s5:");
    if (this.s5 == null) {
      sb.append("null");
    } else {
      sb.append(this.s5);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("s6:");
    if (this.s6 == null) {
      sb.append("null");
    } else {
      sb.append(this.s6);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("s7:");
    if (this.s7 == null) {
      sb.append("null");
    } else {
      sb.append(this.s7);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("s8:");
    if (this.s8 == null) {
      sb.append("null");
    } else {
      sb.append(this.s8);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("d3:");
    sb.append(this.d3);
    first = false;
    if (!first) sb.append(", ");
    sb.append("d4:");
    sb.append(this.d4);
    first = false;
    if (!first) sb.append(", ");
    sb.append("d5:");
    sb.append(this.d5);
    first = false;
    if (!first) sb.append(", ");
    sb.append("b3:");
    sb.append(this.b3);
    first = false;
    if (!first) sb.append(", ");
    sb.append("b4:");
    sb.append(this.b4);
    first = false;
    if (!first) sb.append(", ");
    sb.append("b5:");
    sb.append(this.b5);
    first = false;
    if (!first) sb.append(", ");
    sb.append("iSeq2:");
    if (this.iSeq2 == null) {
      sb.append("null");
    } else {
      sb.append(this.iSeq2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sSeq2:");
    if (this.sSeq2 == null) {
      sb.append("null");
    } else {
      sb.append(this.sSeq2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dSeq1:");
    if (this.dSeq1 == null) {
      sb.append("null");
    } else {
      sb.append(this.dSeq1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dSeq2:");
    if (this.dSeq2 == null) {
      sb.append("null");
    } else {
      sb.append(this.dSeq2);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (mediumData != null) {
      mediumData.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BigDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BigDataStandardScheme getScheme() {
      return new BigDataStandardScheme();
    }
  }

  private static class BigDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<BigData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BigData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MEDIUM_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.mediumData = new MediumData();
              struct.mediumData.read(iprot);
              struct.setMediumDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // N5
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.n5 = iprot.readI32();
              struct.setN5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // N6
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.n6 = iprot.readI32();
              struct.setN6IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // N7
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.n7 = iprot.readI32();
              struct.setN7IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // N8
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.n8 = iprot.readI32();
              struct.setN8IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // N9
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.n9 = iprot.readI32();
              struct.setN9IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // N10
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.n10 = iprot.readI32();
              struct.setN10IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // S3
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.s3 = iprot.readString();
              struct.setS3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // S4
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.s4 = iprot.readString();
              struct.setS4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // S5
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.s5 = iprot.readString();
              struct.setS5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // S6
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.s6 = iprot.readString();
              struct.setS6IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // S7
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.s7 = iprot.readString();
              struct.setS7IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // S8
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.s8 = iprot.readString();
              struct.setS8IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // D3
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.d3 = iprot.readDouble();
              struct.setD3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // D4
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.d4 = iprot.readDouble();
              struct.setD4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // D5
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.d5 = iprot.readDouble();
              struct.setD5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // B3
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.b3 = iprot.readBool();
              struct.setB3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // B4
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.b4 = iprot.readBool();
              struct.setB4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // B5
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.b5 = iprot.readBool();
              struct.setB5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // I_SEQ2
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.iSeq2 = new java.util.ArrayList<java.lang.Integer>(_list16.size);
                int _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = iprot.readI32();
                  struct.iSeq2.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setISeq2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // S_SEQ2
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.sSeq2 = new java.util.ArrayList<java.lang.String>(_list19.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem20;
                for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                {
                  _elem20 = iprot.readString();
                  struct.sSeq2.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setSSeq2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // D_SEQ1
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list22 = iprot.readListBegin();
                struct.dSeq1 = new java.util.ArrayList<java.lang.Double>(_list22.size);
                double _elem23;
                for (int _i24 = 0; _i24 < _list22.size; ++_i24)
                {
                  _elem23 = iprot.readDouble();
                  struct.dSeq1.add(_elem23);
                }
                iprot.readListEnd();
              }
              struct.setDSeq1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // D_SEQ2
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list25 = iprot.readListBegin();
                struct.dSeq2 = new java.util.ArrayList<java.lang.Double>(_list25.size);
                double _elem26;
                for (int _i27 = 0; _i27 < _list25.size; ++_i27)
                {
                  _elem26 = iprot.readDouble();
                  struct.dSeq2.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setDSeq2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BigData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.mediumData != null) {
        oprot.writeFieldBegin(MEDIUM_DATA_FIELD_DESC);
        struct.mediumData.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(N5_FIELD_DESC);
      oprot.writeI32(struct.n5);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(N6_FIELD_DESC);
      oprot.writeI32(struct.n6);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(N7_FIELD_DESC);
      oprot.writeI32(struct.n7);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(N8_FIELD_DESC);
      oprot.writeI32(struct.n8);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(N9_FIELD_DESC);
      oprot.writeI32(struct.n9);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(N10_FIELD_DESC);
      oprot.writeI32(struct.n10);
      oprot.writeFieldEnd();
      if (struct.s3 != null) {
        oprot.writeFieldBegin(S3_FIELD_DESC);
        oprot.writeString(struct.s3);
        oprot.writeFieldEnd();
      }
      if (struct.s4 != null) {
        oprot.writeFieldBegin(S4_FIELD_DESC);
        oprot.writeString(struct.s4);
        oprot.writeFieldEnd();
      }
      if (struct.s5 != null) {
        oprot.writeFieldBegin(S5_FIELD_DESC);
        oprot.writeString(struct.s5);
        oprot.writeFieldEnd();
      }
      if (struct.s6 != null) {
        oprot.writeFieldBegin(S6_FIELD_DESC);
        oprot.writeString(struct.s6);
        oprot.writeFieldEnd();
      }
      if (struct.s7 != null) {
        oprot.writeFieldBegin(S7_FIELD_DESC);
        oprot.writeString(struct.s7);
        oprot.writeFieldEnd();
      }
      if (struct.s8 != null) {
        oprot.writeFieldBegin(S8_FIELD_DESC);
        oprot.writeString(struct.s8);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(D3_FIELD_DESC);
      oprot.writeDouble(struct.d3);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(D4_FIELD_DESC);
      oprot.writeDouble(struct.d4);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(D5_FIELD_DESC);
      oprot.writeDouble(struct.d5);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(B3_FIELD_DESC);
      oprot.writeBool(struct.b3);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(B4_FIELD_DESC);
      oprot.writeBool(struct.b4);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(B5_FIELD_DESC);
      oprot.writeBool(struct.b5);
      oprot.writeFieldEnd();
      if (struct.iSeq2 != null) {
        oprot.writeFieldBegin(I_SEQ2_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.iSeq2.size()));
          for (int _iter28 : struct.iSeq2)
          {
            oprot.writeI32(_iter28);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.sSeq2 != null) {
        oprot.writeFieldBegin(S_SEQ2_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.sSeq2.size()));
          for (java.lang.String _iter29 : struct.sSeq2)
          {
            oprot.writeString(_iter29);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.dSeq1 != null) {
        oprot.writeFieldBegin(D_SEQ1_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.dSeq1.size()));
          for (double _iter30 : struct.dSeq1)
          {
            oprot.writeDouble(_iter30);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.dSeq2 != null) {
        oprot.writeFieldBegin(D_SEQ2_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.dSeq2.size()));
          for (double _iter31 : struct.dSeq2)
          {
            oprot.writeDouble(_iter31);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BigDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BigDataTupleScheme getScheme() {
      return new BigDataTupleScheme();
    }
  }

  private static class BigDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<BigData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BigData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetMediumData()) {
        optionals.set(0);
      }
      if (struct.isSetN5()) {
        optionals.set(1);
      }
      if (struct.isSetN6()) {
        optionals.set(2);
      }
      if (struct.isSetN7()) {
        optionals.set(3);
      }
      if (struct.isSetN8()) {
        optionals.set(4);
      }
      if (struct.isSetN9()) {
        optionals.set(5);
      }
      if (struct.isSetN10()) {
        optionals.set(6);
      }
      if (struct.isSetS3()) {
        optionals.set(7);
      }
      if (struct.isSetS4()) {
        optionals.set(8);
      }
      if (struct.isSetS5()) {
        optionals.set(9);
      }
      if (struct.isSetS6()) {
        optionals.set(10);
      }
      if (struct.isSetS7()) {
        optionals.set(11);
      }
      if (struct.isSetS8()) {
        optionals.set(12);
      }
      if (struct.isSetD3()) {
        optionals.set(13);
      }
      if (struct.isSetD4()) {
        optionals.set(14);
      }
      if (struct.isSetD5()) {
        optionals.set(15);
      }
      if (struct.isSetB3()) {
        optionals.set(16);
      }
      if (struct.isSetB4()) {
        optionals.set(17);
      }
      if (struct.isSetB5()) {
        optionals.set(18);
      }
      if (struct.isSetISeq2()) {
        optionals.set(19);
      }
      if (struct.isSetSSeq2()) {
        optionals.set(20);
      }
      if (struct.isSetDSeq1()) {
        optionals.set(21);
      }
      if (struct.isSetDSeq2()) {
        optionals.set(22);
      }
      oprot.writeBitSet(optionals, 23);
      if (struct.isSetMediumData()) {
        struct.mediumData.write(oprot);
      }
      if (struct.isSetN5()) {
        oprot.writeI32(struct.n5);
      }
      if (struct.isSetN6()) {
        oprot.writeI32(struct.n6);
      }
      if (struct.isSetN7()) {
        oprot.writeI32(struct.n7);
      }
      if (struct.isSetN8()) {
        oprot.writeI32(struct.n8);
      }
      if (struct.isSetN9()) {
        oprot.writeI32(struct.n9);
      }
      if (struct.isSetN10()) {
        oprot.writeI32(struct.n10);
      }
      if (struct.isSetS3()) {
        oprot.writeString(struct.s3);
      }
      if (struct.isSetS4()) {
        oprot.writeString(struct.s4);
      }
      if (struct.isSetS5()) {
        oprot.writeString(struct.s5);
      }
      if (struct.isSetS6()) {
        oprot.writeString(struct.s6);
      }
      if (struct.isSetS7()) {
        oprot.writeString(struct.s7);
      }
      if (struct.isSetS8()) {
        oprot.writeString(struct.s8);
      }
      if (struct.isSetD3()) {
        oprot.writeDouble(struct.d3);
      }
      if (struct.isSetD4()) {
        oprot.writeDouble(struct.d4);
      }
      if (struct.isSetD5()) {
        oprot.writeDouble(struct.d5);
      }
      if (struct.isSetB3()) {
        oprot.writeBool(struct.b3);
      }
      if (struct.isSetB4()) {
        oprot.writeBool(struct.b4);
      }
      if (struct.isSetB5()) {
        oprot.writeBool(struct.b5);
      }
      if (struct.isSetISeq2()) {
        {
          oprot.writeI32(struct.iSeq2.size());
          for (int _iter32 : struct.iSeq2)
          {
            oprot.writeI32(_iter32);
          }
        }
      }
      if (struct.isSetSSeq2()) {
        {
          oprot.writeI32(struct.sSeq2.size());
          for (java.lang.String _iter33 : struct.sSeq2)
          {
            oprot.writeString(_iter33);
          }
        }
      }
      if (struct.isSetDSeq1()) {
        {
          oprot.writeI32(struct.dSeq1.size());
          for (double _iter34 : struct.dSeq1)
          {
            oprot.writeDouble(_iter34);
          }
        }
      }
      if (struct.isSetDSeq2()) {
        {
          oprot.writeI32(struct.dSeq2.size());
          for (double _iter35 : struct.dSeq2)
          {
            oprot.writeDouble(_iter35);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BigData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(23);
      if (incoming.get(0)) {
        struct.mediumData = new MediumData();
        struct.mediumData.read(iprot);
        struct.setMediumDataIsSet(true);
      }
      if (incoming.get(1)) {
        struct.n5 = iprot.readI32();
        struct.setN5IsSet(true);
      }
      if (incoming.get(2)) {
        struct.n6 = iprot.readI32();
        struct.setN6IsSet(true);
      }
      if (incoming.get(3)) {
        struct.n7 = iprot.readI32();
        struct.setN7IsSet(true);
      }
      if (incoming.get(4)) {
        struct.n8 = iprot.readI32();
        struct.setN8IsSet(true);
      }
      if (incoming.get(5)) {
        struct.n9 = iprot.readI32();
        struct.setN9IsSet(true);
      }
      if (incoming.get(6)) {
        struct.n10 = iprot.readI32();
        struct.setN10IsSet(true);
      }
      if (incoming.get(7)) {
        struct.s3 = iprot.readString();
        struct.setS3IsSet(true);
      }
      if (incoming.get(8)) {
        struct.s4 = iprot.readString();
        struct.setS4IsSet(true);
      }
      if (incoming.get(9)) {
        struct.s5 = iprot.readString();
        struct.setS5IsSet(true);
      }
      if (incoming.get(10)) {
        struct.s6 = iprot.readString();
        struct.setS6IsSet(true);
      }
      if (incoming.get(11)) {
        struct.s7 = iprot.readString();
        struct.setS7IsSet(true);
      }
      if (incoming.get(12)) {
        struct.s8 = iprot.readString();
        struct.setS8IsSet(true);
      }
      if (incoming.get(13)) {
        struct.d3 = iprot.readDouble();
        struct.setD3IsSet(true);
      }
      if (incoming.get(14)) {
        struct.d4 = iprot.readDouble();
        struct.setD4IsSet(true);
      }
      if (incoming.get(15)) {
        struct.d5 = iprot.readDouble();
        struct.setD5IsSet(true);
      }
      if (incoming.get(16)) {
        struct.b3 = iprot.readBool();
        struct.setB3IsSet(true);
      }
      if (incoming.get(17)) {
        struct.b4 = iprot.readBool();
        struct.setB4IsSet(true);
      }
      if (incoming.get(18)) {
        struct.b5 = iprot.readBool();
        struct.setB5IsSet(true);
      }
      if (incoming.get(19)) {
        {
          org.apache.thrift.protocol.TList _list36 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.iSeq2 = new java.util.ArrayList<java.lang.Integer>(_list36.size);
          int _elem37;
          for (int _i38 = 0; _i38 < _list36.size; ++_i38)
          {
            _elem37 = iprot.readI32();
            struct.iSeq2.add(_elem37);
          }
        }
        struct.setISeq2IsSet(true);
      }
      if (incoming.get(20)) {
        {
          org.apache.thrift.protocol.TList _list39 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.sSeq2 = new java.util.ArrayList<java.lang.String>(_list39.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem40;
          for (int _i41 = 0; _i41 < _list39.size; ++_i41)
          {
            _elem40 = iprot.readString();
            struct.sSeq2.add(_elem40);
          }
        }
        struct.setSSeq2IsSet(true);
      }
      if (incoming.get(21)) {
        {
          org.apache.thrift.protocol.TList _list42 = iprot.readListBegin(org.apache.thrift.protocol.TType.DOUBLE);
          struct.dSeq1 = new java.util.ArrayList<java.lang.Double>(_list42.size);
          double _elem43;
          for (int _i44 = 0; _i44 < _list42.size; ++_i44)
          {
            _elem43 = iprot.readDouble();
            struct.dSeq1.add(_elem43);
          }
        }
        struct.setDSeq1IsSet(true);
      }
      if (incoming.get(22)) {
        {
          org.apache.thrift.protocol.TList _list45 = iprot.readListBegin(org.apache.thrift.protocol.TType.DOUBLE);
          struct.dSeq2 = new java.util.ArrayList<java.lang.Double>(_list45.size);
          double _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = iprot.readDouble();
            struct.dSeq2.add(_elem46);
          }
        }
        struct.setDSeq2IsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

