//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.5
//
// <auto-generated>
//
// Generated from file `Tester.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Tester;

public class MediumData implements java.lang.Cloneable,
                                   java.io.Serializable
{
    public SmallData smallData;

    public int n3;

    public int n4;

    public double d1;

    public double d2;

    public String s2;

    public boolean b2;

    public String[] sSeq1;

    public MediumData()
    {
        this.smallData = new SmallData();
        this.s2 = "";
    }

    public MediumData(SmallData smallData, int n3, int n4, double d1, double d2, String s2, boolean b2, String[] sSeq1)
    {
        this.smallData = smallData;
        this.n3 = n3;
        this.n4 = n4;
        this.d1 = d1;
        this.d2 = d2;
        this.s2 = s2;
        this.b2 = b2;
        this.sSeq1 = sSeq1;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        MediumData r = null;
        if(rhs instanceof MediumData)
        {
            r = (MediumData)rhs;
        }

        if(r != null)
        {
            if(this.smallData != r.smallData)
            {
                if(this.smallData == null || r.smallData == null || !this.smallData.equals(r.smallData))
                {
                    return false;
                }
            }
            if(this.n3 != r.n3)
            {
                return false;
            }
            if(this.n4 != r.n4)
            {
                return false;
            }
            if(this.d1 != r.d1)
            {
                return false;
            }
            if(this.d2 != r.d2)
            {
                return false;
            }
            if(this.s2 != r.s2)
            {
                if(this.s2 == null || r.s2 == null || !this.s2.equals(r.s2))
                {
                    return false;
                }
            }
            if(this.b2 != r.b2)
            {
                return false;
            }
            if(!java.util.Arrays.equals(this.sSeq1, r.sSeq1))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::Tester::MediumData");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, smallData);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, n3);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, n4);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, d1);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, d2);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, s2);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, b2);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, sSeq1);
        return h_;
    }

    public MediumData clone()
    {
        MediumData c = null;
        try
        {
            c = (MediumData)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        SmallData.ice_write(ostr, this.smallData);
        ostr.writeInt(this.n3);
        ostr.writeInt(this.n4);
        ostr.writeDouble(this.d1);
        ostr.writeDouble(this.d2);
        ostr.writeString(this.s2);
        ostr.writeBool(this.b2);
        ostr.writeStringSeq(this.sSeq1);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.smallData = SmallData.ice_read(istr);
        this.n3 = istr.readInt();
        this.n4 = istr.readInt();
        this.d1 = istr.readDouble();
        this.d2 = istr.readDouble();
        this.s2 = istr.readString();
        this.b2 = istr.readBool();
        this.sSeq1 = istr.readStringSeq();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, MediumData v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public MediumData ice_read(com.zeroc.Ice.InputStream istr)
    {
        MediumData v = new MediumData();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<MediumData> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, MediumData v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<MediumData> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(MediumData.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final MediumData _nullMarshalValue = new MediumData();

    /** @hidden */
    public static final long serialVersionUID = -979934952L;
}
