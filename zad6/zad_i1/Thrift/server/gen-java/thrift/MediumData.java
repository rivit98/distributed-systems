/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-06-02")
public class MediumData implements org.apache.thrift.TBase<MediumData, MediumData._Fields>, java.io.Serializable, Cloneable, Comparable<MediumData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MediumData");

  private static final org.apache.thrift.protocol.TField SMALL_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("smallData", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField N3_FIELD_DESC = new org.apache.thrift.protocol.TField("n3", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField N4_FIELD_DESC = new org.apache.thrift.protocol.TField("n4", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField D1_FIELD_DESC = new org.apache.thrift.protocol.TField("d1", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField D2_FIELD_DESC = new org.apache.thrift.protocol.TField("d2", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField S2_FIELD_DESC = new org.apache.thrift.protocol.TField("s2", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField B2_FIELD_DESC = new org.apache.thrift.protocol.TField("b2", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField S_SEQ1_FIELD_DESC = new org.apache.thrift.protocol.TField("sSeq1", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MediumDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MediumDataTupleSchemeFactory();

  private @org.apache.thrift.annotation.Nullable SmallData smallData; // required
  private int n3; // required
  private int n4; // required
  private double d1; // required
  private double d2; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String s2; // required
  private boolean b2; // required
  private @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> sSeq1; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SMALL_DATA((short)1, "smallData"),
    N3((short)2, "n3"),
    N4((short)3, "n4"),
    D1((short)4, "d1"),
    D2((short)5, "d2"),
    S2((short)6, "s2"),
    B2((short)7, "b2"),
    S_SEQ1((short)8, "sSeq1");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SMALL_DATA
          return SMALL_DATA;
        case 2: // N3
          return N3;
        case 3: // N4
          return N4;
        case 4: // D1
          return D1;
        case 5: // D2
          return D2;
        case 6: // S2
          return S2;
        case 7: // B2
          return B2;
        case 8: // S_SEQ1
          return S_SEQ1;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __N3_ISSET_ID = 0;
  private static final int __N4_ISSET_ID = 1;
  private static final int __D1_ISSET_ID = 2;
  private static final int __D2_ISSET_ID = 3;
  private static final int __B2_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SMALL_DATA, new org.apache.thrift.meta_data.FieldMetaData("smallData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SmallData.class)));
    tmpMap.put(_Fields.N3, new org.apache.thrift.meta_data.FieldMetaData("n3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.N4, new org.apache.thrift.meta_data.FieldMetaData("n4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.D1, new org.apache.thrift.meta_data.FieldMetaData("d1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.D2, new org.apache.thrift.meta_data.FieldMetaData("d2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.S2, new org.apache.thrift.meta_data.FieldMetaData("s2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.B2, new org.apache.thrift.meta_data.FieldMetaData("b2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.S_SEQ1, new org.apache.thrift.meta_data.FieldMetaData("sSeq1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MediumData.class, metaDataMap);
  }

  public MediumData() {
  }

  public MediumData(
    SmallData smallData,
    int n3,
    int n4,
    double d1,
    double d2,
    java.lang.String s2,
    boolean b2,
    java.util.List<java.lang.String> sSeq1)
  {
    this();
    this.smallData = smallData;
    this.n3 = n3;
    setN3IsSet(true);
    this.n4 = n4;
    setN4IsSet(true);
    this.d1 = d1;
    setD1IsSet(true);
    this.d2 = d2;
    setD2IsSet(true);
    this.s2 = s2;
    this.b2 = b2;
    setB2IsSet(true);
    this.sSeq1 = sSeq1;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MediumData(MediumData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSmallData()) {
      this.smallData = new SmallData(other.smallData);
    }
    this.n3 = other.n3;
    this.n4 = other.n4;
    this.d1 = other.d1;
    this.d2 = other.d2;
    if (other.isSetS2()) {
      this.s2 = other.s2;
    }
    this.b2 = other.b2;
    if (other.isSetSSeq1()) {
      java.util.List<java.lang.String> __this__sSeq1 = new java.util.ArrayList<java.lang.String>(other.sSeq1);
      this.sSeq1 = __this__sSeq1;
    }
  }

  public MediumData deepCopy() {
    return new MediumData(this);
  }

  @Override
  public void clear() {
    this.smallData = null;
    setN3IsSet(false);
    this.n3 = 0;
    setN4IsSet(false);
    this.n4 = 0;
    setD1IsSet(false);
    this.d1 = 0.0;
    setD2IsSet(false);
    this.d2 = 0.0;
    this.s2 = null;
    setB2IsSet(false);
    this.b2 = false;
    this.sSeq1 = null;
  }

  @org.apache.thrift.annotation.Nullable
  public SmallData getSmallData() {
    return this.smallData;
  }

  public MediumData setSmallData(@org.apache.thrift.annotation.Nullable SmallData smallData) {
    this.smallData = smallData;
    return this;
  }

  public void unsetSmallData() {
    this.smallData = null;
  }

  /** Returns true if field smallData is set (has been assigned a value) and false otherwise */
  public boolean isSetSmallData() {
    return this.smallData != null;
  }

  public void setSmallDataIsSet(boolean value) {
    if (!value) {
      this.smallData = null;
    }
  }

  public int getN3() {
    return this.n3;
  }

  public MediumData setN3(int n3) {
    this.n3 = n3;
    setN3IsSet(true);
    return this;
  }

  public void unsetN3() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __N3_ISSET_ID);
  }

  /** Returns true if field n3 is set (has been assigned a value) and false otherwise */
  public boolean isSetN3() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __N3_ISSET_ID);
  }

  public void setN3IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __N3_ISSET_ID, value);
  }

  public int getN4() {
    return this.n4;
  }

  public MediumData setN4(int n4) {
    this.n4 = n4;
    setN4IsSet(true);
    return this;
  }

  public void unsetN4() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __N4_ISSET_ID);
  }

  /** Returns true if field n4 is set (has been assigned a value) and false otherwise */
  public boolean isSetN4() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __N4_ISSET_ID);
  }

  public void setN4IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __N4_ISSET_ID, value);
  }

  public double getD1() {
    return this.d1;
  }

  public MediumData setD1(double d1) {
    this.d1 = d1;
    setD1IsSet(true);
    return this;
  }

  public void unsetD1() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __D1_ISSET_ID);
  }

  /** Returns true if field d1 is set (has been assigned a value) and false otherwise */
  public boolean isSetD1() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __D1_ISSET_ID);
  }

  public void setD1IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __D1_ISSET_ID, value);
  }

  public double getD2() {
    return this.d2;
  }

  public MediumData setD2(double d2) {
    this.d2 = d2;
    setD2IsSet(true);
    return this;
  }

  public void unsetD2() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __D2_ISSET_ID);
  }

  /** Returns true if field d2 is set (has been assigned a value) and false otherwise */
  public boolean isSetD2() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __D2_ISSET_ID);
  }

  public void setD2IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __D2_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getS2() {
    return this.s2;
  }

  public MediumData setS2(@org.apache.thrift.annotation.Nullable java.lang.String s2) {
    this.s2 = s2;
    return this;
  }

  public void unsetS2() {
    this.s2 = null;
  }

  /** Returns true if field s2 is set (has been assigned a value) and false otherwise */
  public boolean isSetS2() {
    return this.s2 != null;
  }

  public void setS2IsSet(boolean value) {
    if (!value) {
      this.s2 = null;
    }
  }

  public boolean isB2() {
    return this.b2;
  }

  public MediumData setB2(boolean b2) {
    this.b2 = b2;
    setB2IsSet(true);
    return this;
  }

  public void unsetB2() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __B2_ISSET_ID);
  }

  /** Returns true if field b2 is set (has been assigned a value) and false otherwise */
  public boolean isSetB2() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __B2_ISSET_ID);
  }

  public void setB2IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __B2_ISSET_ID, value);
  }

  public int getSSeq1Size() {
    return (this.sSeq1 == null) ? 0 : this.sSeq1.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getSSeq1Iterator() {
    return (this.sSeq1 == null) ? null : this.sSeq1.iterator();
  }

  public void addToSSeq1(java.lang.String elem) {
    if (this.sSeq1 == null) {
      this.sSeq1 = new java.util.ArrayList<java.lang.String>();
    }
    this.sSeq1.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getSSeq1() {
    return this.sSeq1;
  }

  public MediumData setSSeq1(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> sSeq1) {
    this.sSeq1 = sSeq1;
    return this;
  }

  public void unsetSSeq1() {
    this.sSeq1 = null;
  }

  /** Returns true if field sSeq1 is set (has been assigned a value) and false otherwise */
  public boolean isSetSSeq1() {
    return this.sSeq1 != null;
  }

  public void setSSeq1IsSet(boolean value) {
    if (!value) {
      this.sSeq1 = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SMALL_DATA:
      if (value == null) {
        unsetSmallData();
      } else {
        setSmallData((SmallData)value);
      }
      break;

    case N3:
      if (value == null) {
        unsetN3();
      } else {
        setN3((java.lang.Integer)value);
      }
      break;

    case N4:
      if (value == null) {
        unsetN4();
      } else {
        setN4((java.lang.Integer)value);
      }
      break;

    case D1:
      if (value == null) {
        unsetD1();
      } else {
        setD1((java.lang.Double)value);
      }
      break;

    case D2:
      if (value == null) {
        unsetD2();
      } else {
        setD2((java.lang.Double)value);
      }
      break;

    case S2:
      if (value == null) {
        unsetS2();
      } else {
        setS2((java.lang.String)value);
      }
      break;

    case B2:
      if (value == null) {
        unsetB2();
      } else {
        setB2((java.lang.Boolean)value);
      }
      break;

    case S_SEQ1:
      if (value == null) {
        unsetSSeq1();
      } else {
        setSSeq1((java.util.List<java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SMALL_DATA:
      return getSmallData();

    case N3:
      return getN3();

    case N4:
      return getN4();

    case D1:
      return getD1();

    case D2:
      return getD2();

    case S2:
      return getS2();

    case B2:
      return isB2();

    case S_SEQ1:
      return getSSeq1();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SMALL_DATA:
      return isSetSmallData();
    case N3:
      return isSetN3();
    case N4:
      return isSetN4();
    case D1:
      return isSetD1();
    case D2:
      return isSetD2();
    case S2:
      return isSetS2();
    case B2:
      return isSetB2();
    case S_SEQ1:
      return isSetSSeq1();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof MediumData)
      return this.equals((MediumData)that);
    return false;
  }

  public boolean equals(MediumData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_smallData = true && this.isSetSmallData();
    boolean that_present_smallData = true && that.isSetSmallData();
    if (this_present_smallData || that_present_smallData) {
      if (!(this_present_smallData && that_present_smallData))
        return false;
      if (!this.smallData.equals(that.smallData))
        return false;
    }

    boolean this_present_n3 = true;
    boolean that_present_n3 = true;
    if (this_present_n3 || that_present_n3) {
      if (!(this_present_n3 && that_present_n3))
        return false;
      if (this.n3 != that.n3)
        return false;
    }

    boolean this_present_n4 = true;
    boolean that_present_n4 = true;
    if (this_present_n4 || that_present_n4) {
      if (!(this_present_n4 && that_present_n4))
        return false;
      if (this.n4 != that.n4)
        return false;
    }

    boolean this_present_d1 = true;
    boolean that_present_d1 = true;
    if (this_present_d1 || that_present_d1) {
      if (!(this_present_d1 && that_present_d1))
        return false;
      if (this.d1 != that.d1)
        return false;
    }

    boolean this_present_d2 = true;
    boolean that_present_d2 = true;
    if (this_present_d2 || that_present_d2) {
      if (!(this_present_d2 && that_present_d2))
        return false;
      if (this.d2 != that.d2)
        return false;
    }

    boolean this_present_s2 = true && this.isSetS2();
    boolean that_present_s2 = true && that.isSetS2();
    if (this_present_s2 || that_present_s2) {
      if (!(this_present_s2 && that_present_s2))
        return false;
      if (!this.s2.equals(that.s2))
        return false;
    }

    boolean this_present_b2 = true;
    boolean that_present_b2 = true;
    if (this_present_b2 || that_present_b2) {
      if (!(this_present_b2 && that_present_b2))
        return false;
      if (this.b2 != that.b2)
        return false;
    }

    boolean this_present_sSeq1 = true && this.isSetSSeq1();
    boolean that_present_sSeq1 = true && that.isSetSSeq1();
    if (this_present_sSeq1 || that_present_sSeq1) {
      if (!(this_present_sSeq1 && that_present_sSeq1))
        return false;
      if (!this.sSeq1.equals(that.sSeq1))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSmallData()) ? 131071 : 524287);
    if (isSetSmallData())
      hashCode = hashCode * 8191 + smallData.hashCode();

    hashCode = hashCode * 8191 + n3;

    hashCode = hashCode * 8191 + n4;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(d1);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(d2);

    hashCode = hashCode * 8191 + ((isSetS2()) ? 131071 : 524287);
    if (isSetS2())
      hashCode = hashCode * 8191 + s2.hashCode();

    hashCode = hashCode * 8191 + ((b2) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetSSeq1()) ? 131071 : 524287);
    if (isSetSSeq1())
      hashCode = hashCode * 8191 + sSeq1.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MediumData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetSmallData(), other.isSetSmallData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSmallData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smallData, other.smallData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetN3(), other.isSetN3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetN3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.n3, other.n3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetN4(), other.isSetN4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetN4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.n4, other.n4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetD1(), other.isSetD1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d1, other.d1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetD2(), other.isSetD2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d2, other.d2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetS2(), other.isSetS2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s2, other.s2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetB2(), other.isSetB2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b2, other.b2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSSeq1(), other.isSetSSeq1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSSeq1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sSeq1, other.sSeq1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MediumData(");
    boolean first = true;

    sb.append("smallData:");
    if (this.smallData == null) {
      sb.append("null");
    } else {
      sb.append(this.smallData);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("n3:");
    sb.append(this.n3);
    first = false;
    if (!first) sb.append(", ");
    sb.append("n4:");
    sb.append(this.n4);
    first = false;
    if (!first) sb.append(", ");
    sb.append("d1:");
    sb.append(this.d1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("d2:");
    sb.append(this.d2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("s2:");
    if (this.s2 == null) {
      sb.append("null");
    } else {
      sb.append(this.s2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("b2:");
    sb.append(this.b2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sSeq1:");
    if (this.sSeq1 == null) {
      sb.append("null");
    } else {
      sb.append(this.sSeq1);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (smallData != null) {
      smallData.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MediumDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MediumDataStandardScheme getScheme() {
      return new MediumDataStandardScheme();
    }
  }

  private static class MediumDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<MediumData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MediumData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SMALL_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.smallData = new SmallData();
              struct.smallData.read(iprot);
              struct.setSmallDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // N3
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.n3 = iprot.readI32();
              struct.setN3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // N4
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.n4 = iprot.readI32();
              struct.setN4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // D1
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.d1 = iprot.readDouble();
              struct.setD1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // D2
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.d2 = iprot.readDouble();
              struct.setD2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // S2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.s2 = iprot.readString();
              struct.setS2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // B2
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.b2 = iprot.readBool();
              struct.setB2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // S_SEQ1
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.sSeq1 = new java.util.ArrayList<java.lang.String>(_list8.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = iprot.readString();
                  struct.sSeq1.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setSSeq1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MediumData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.smallData != null) {
        oprot.writeFieldBegin(SMALL_DATA_FIELD_DESC);
        struct.smallData.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(N3_FIELD_DESC);
      oprot.writeI32(struct.n3);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(N4_FIELD_DESC);
      oprot.writeI32(struct.n4);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(D1_FIELD_DESC);
      oprot.writeDouble(struct.d1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(D2_FIELD_DESC);
      oprot.writeDouble(struct.d2);
      oprot.writeFieldEnd();
      if (struct.s2 != null) {
        oprot.writeFieldBegin(S2_FIELD_DESC);
        oprot.writeString(struct.s2);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(B2_FIELD_DESC);
      oprot.writeBool(struct.b2);
      oprot.writeFieldEnd();
      if (struct.sSeq1 != null) {
        oprot.writeFieldBegin(S_SEQ1_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.sSeq1.size()));
          for (java.lang.String _iter11 : struct.sSeq1)
          {
            oprot.writeString(_iter11);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MediumDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MediumDataTupleScheme getScheme() {
      return new MediumDataTupleScheme();
    }
  }

  private static class MediumDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<MediumData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MediumData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSmallData()) {
        optionals.set(0);
      }
      if (struct.isSetN3()) {
        optionals.set(1);
      }
      if (struct.isSetN4()) {
        optionals.set(2);
      }
      if (struct.isSetD1()) {
        optionals.set(3);
      }
      if (struct.isSetD2()) {
        optionals.set(4);
      }
      if (struct.isSetS2()) {
        optionals.set(5);
      }
      if (struct.isSetB2()) {
        optionals.set(6);
      }
      if (struct.isSetSSeq1()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetSmallData()) {
        struct.smallData.write(oprot);
      }
      if (struct.isSetN3()) {
        oprot.writeI32(struct.n3);
      }
      if (struct.isSetN4()) {
        oprot.writeI32(struct.n4);
      }
      if (struct.isSetD1()) {
        oprot.writeDouble(struct.d1);
      }
      if (struct.isSetD2()) {
        oprot.writeDouble(struct.d2);
      }
      if (struct.isSetS2()) {
        oprot.writeString(struct.s2);
      }
      if (struct.isSetB2()) {
        oprot.writeBool(struct.b2);
      }
      if (struct.isSetSSeq1()) {
        {
          oprot.writeI32(struct.sSeq1.size());
          for (java.lang.String _iter12 : struct.sSeq1)
          {
            oprot.writeString(_iter12);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MediumData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.smallData = new SmallData();
        struct.smallData.read(iprot);
        struct.setSmallDataIsSet(true);
      }
      if (incoming.get(1)) {
        struct.n3 = iprot.readI32();
        struct.setN3IsSet(true);
      }
      if (incoming.get(2)) {
        struct.n4 = iprot.readI32();
        struct.setN4IsSet(true);
      }
      if (incoming.get(3)) {
        struct.d1 = iprot.readDouble();
        struct.setD1IsSet(true);
      }
      if (incoming.get(4)) {
        struct.d2 = iprot.readDouble();
        struct.setD2IsSet(true);
      }
      if (incoming.get(5)) {
        struct.s2 = iprot.readString();
        struct.setS2IsSet(true);
      }
      if (incoming.get(6)) {
        struct.b2 = iprot.readBool();
        struct.setB2IsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list13 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.sSeq1 = new java.util.ArrayList<java.lang.String>(_list13.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = iprot.readString();
            struct.sSeq1.add(_elem14);
          }
        }
        struct.setSSeq1IsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

